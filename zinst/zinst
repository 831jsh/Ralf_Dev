#!/bin/bash   
# GSshop package install manager   
# Made by Jiook Yang
# goody80762@gmail.com

export TIME_STYLE="+%b %e %R"

VERSION=2.5.5
zinst_group=wheel

Allcommand=$@
Comm_x=$1
SetOptionValue=$2
Pkg_list=$2
Pkg_file=$3
HostC=$3
Hostname=$4


List_Up="ls -l"

Pkg_count=${#Pkg_list[@]}; 
Host_count=${#TargetHost[@]}; 
                
### Base information
### ------ Config Area -----
Dist_server="http://DISTsERVERsET/"
sed -i "/DISTsERVERsET/d" /etc/hosts;echo "DISTsERVERIp   DISTsERVERsET" >> /etc/hosts

ZinstBaseRoot="RootDirectorY"

ZinstDIRs="$ZinstBaseRoot/zinst"
ZinstSourceDir="$ZinstBaseRoot/vault/Source"
History_LOG="$ZinstBaseRoot/vault/Source/.zinst_history_log"
### ------ Config Area -----


export ZinstDir="$ZinstBaseRoot"
### Config about of Save file
Save_Dir="$ZinstBaseRoot/z/save"
Save_Filename="zinst-save"
CheckSaveDir=`ls $ZinstBaseRoot/z |grep save`


####################  Set option filter function start    ###########################
# Check -set option in command line
SetFilter=`echo "$Allcommand" | egrep " \-set " | awk -F '-set ' '{print $2}'`
h_SetCommand=""
	if [[ $SetFilter != "" ]]
	then
		SetParse=`echo "$Allcommand" | egrep " \-set " | awk -F '-set ' '{print "-set "$2}'| awk -F '-h' '{print $1}'`
		SetRemove=`echo "$Allcommand" | sed -e "s/$SetParse//"`

		SetCommand=$SetFilter
		Allcommand=$SetRemove
		h_SetCommand="-set `echo "$SetCommand" | awk -F ' -h' '{print $1}'`"
	fi

	####################  Set option filter function stop     ###########################
	if [[ $CheckSaveDir = "" ]]
	then
		mkdir -p $Save_Dir
	fi

Barr="======================================================================="


####################  Multi copier function start    ###########################
mcp_checker=`echo $Allcommand | awk '{print $1}' | grep "^mcp$"`

    if [[ $mcp_checker = "mcp" ]]
    then
		h_checker=`echo $Allcommand | grep " -h "`
		H_checker=`echo $Allcommand | grep " -H "`
			if [[ $h_checker != "" ]]
			then
				Hostname="${Allcommand[*]##* -h }"
				AllCommand=`echo "${Allcommand[*]% -h *}" | sed -e 's/^mcp//g'`
				TargetDir=`echo $AllCommand | awk '{print $NF}'`
				Source=`echo $AllCommand | awk '{for (i=1;i<NF;i=i+1) print $i}'`
				
				SourceNum=`echo $Source | awk '{print NF}' `

				HostNum=`echo $Hostname | awk '{print NF}'`
				Hcount=1
					while [[ $Hcount -le $HostNum ]]
					do
						TartgetHost=`echo $Hostname | awk '{print $'$Hcount'}'`

						echo ""
						echo "[:: $TartgetHost  ::]"		

						Scount=1
							while [[ $Scount -le $SourceNum ]]
							do
								PartedSource=`echo $Source |awk '{print $'$Scount'}'`
								
								Check_Files=`ls $PartedSource`
									if [[ $Check_Files != $PartedSource  ]]
									then
										echo " =============  $PartedSource File not exist ============="
										exit 0;
									fi

								scp $PartedSource $TartgetHost:$TargetDir
								let Scount=Scount+1
							done
						let Hcount=Hcount+1
					done
			fi

			if [[ $H_checker != "" ]]
			then
				HostnameFile="${Allcommand[*]##* -H }"
				Hostname=`eval cat $HostnameFile`


				echo Hostname ====================== $Hostname
				AllCommand=`echo "${Allcommand[*]% -H *}" | sed -e 's/^mcp//g'`
				TargetDir=`echo $AllCommand | awk '{print $NF}'`
				Source=`echo $AllCommand | awk '{for (i=1;i<NF;i=i+1) print $i}'`
				
				SourceNum=`echo $Source | awk '{print NF}' `

				HostNum=`echo $Hostname | awk '{print NF}'`
				Hcount=1
					while [[ $Hcount -le $HostNum ]]
					do
						TartgetHost=`echo $Hostname | awk '{print $'$Hcount'}'`
						echo ""
						echo "[:: $TartgetHost  ::]"		


						Scount=1
							while [[ $Scount -le $SourceNum ]]
							do
								PartedSource=`echo $Source |awk '{print $'$Scount'}'`
								Check_Files=`ls $PartedSource`
									if [[ $Check_Files != $PartedSource  ]]
									then
										echo " =============  $PartedSource File not exist ============="
										exit 0;
									fi

								scp $PartedSource $TartgetHost:$TargetDir	
								let Scount=Scount+1
							done
						let Hcount=Hcount+1
					done
			fi
		exit 0;
	fi



####################  Multi copier function stop    ###########################




######### -same option re-define for syntax##############
FindSameC=`echo $@ |grep "\-same"`

	if [[ $FindSameC != "" ]]
	then 
		Allcom_m=`echo $@ |sed -e 's/ -same//g'`
		CheckAllcom=`echo "$Allcom_m" | grep "\-h "`
			if [[ $CheckAllcom != "" ]];
			then
				Allcommand=`echo $Allcom_m |sed -e 's/\.zinst -h /\.zinst -same -h /g'|sed -e 's/-same$//g'`
			else
				Allcommand=`echo $Allcom_m |sed -e 's/\.zinst -H /\.zinst -same -H /g'|sed -e 's/-same$//g'`
			fi
	fi





######### -downgrade option re-define for syntax##############
FindDownC=`echo $@ |grep "\-downgrade"`
	if [[ $FindDownC != "" ]]
	then 
			Allcom_m=`echo $@ |sed -e 's/ -downgrade//g'`
			Allcommand=`echo $Allcom_m |sed -e 's/\.zinst -h /\.zinst -downgrade -h /g'|sed -e 's/-downgrade$//g' `

	fi

################ Hostlist checker #################### -h

RotaCommand=`echo "$Allcommand" |grep "\-h " | awk -F "-h " '{print $1}'`
RotaHost=`echo "$Allcommand" |grep "\-h " | awk -F "-h " '{print $2}'`
szinst="zinst"

	if [[ $RotaHost != "" ]]
	then 
		Count=1
		Max=`eval echo $RotaHost | awk '{print NF}'`

			while [[ $Count -le $Max ]];
			do
				HostF=`eval echo $RotaHost | awk '{print $'$Count'}'`
				## ssh connection check
				CheckConnection=`ssh $HostF > $ZinstBaseRoot/vault/Source/ssh_conn_test.log 2> /dev/null;cat $ZinstBaseRoot/vault/Source/ssh_conn_test.log |grep known; rm -f $ZinstBaseRoot/vault/Source/ssh_conn_test.log`

					if [[ $CheckConnection != "" ]]
					then
						echo $Barr	
						echo "It couldn't connect this host($HostF). Please check this hostname"
						echo $Barr	
					else
						## Install start with target host ##
						## Check the Package or Distribution server
						## Package scp to destination
						zinst_emptyCheck=`ssh $HostF "ls /usr/bin/ |grep zinst"`
							if [[ $zinst_emptyCheck != "" ]]
							then
								zinst_checkDes=`ssh $HostF "cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'"`
								zinst_checkLoc=`cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`

									if [[ $zinst_checkDes < $zinst_checkLoc ]];
									then
										scp /usr/bin/zinst $HostF:/usr/bin/
									fi
							else
								scp /usr/bin/zinst $HostF:/usr/bin/
							fi

						#### Check SSH command ########
						Check_sshC=`echo $RotaCommand |awk '{print $1}'|grep ^ssh$`
							if [[ $Check_sshC != "" ]]
							then
								RotaCommand=`echo $RotaCommand | awk -F 'ssh' '{print $2}'`
								szinst=""
							fi

						ssh $HostF "mkdir -p $ZinstBaseRoot/vault/Source"
						echo ""

						#### Local package scp to destination ####
						LocalPkg=`echo $RotaCommand | sed -e 's/^[a-z]* //g'`
						LocalPkg_Num=`echo $LocalPkg | awk '{print NF}'`
						CountSub=1
							while [[ $CountSub -le $LocalPkg_Num ]]
							do
								LocalRealPkg=`echo $LocalPkg | awk '{print $'$CountSub'}'`
								Check_sshC=`echo $Allcommand | awk '{print $1}'|grep ^ssh$`
									if [[ $Check_sshC = "" ]]
									then
										LocalPkg_chk=`cd $PWD;ls |grep "^$LocalRealPkg"`
									fi

									if [[ $LocalPkg_chk != "" ]]
									then
										scp $LocalRealPkg $HostF:$ZinstSourceDir/
									fi

								let CountSub=CountSub+1
							done;
						ssh $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir ;$szinst $RotaCommand $h_SetCommand";
				fi
			let Count=Count+1
			done
		exit 0;
	fi






############## File of Hostlist checker #################  -H
RotaCommand=`echo "$Allcommand" |grep "\-H" | awk -F "-H" '{print $1}'`
RotaHost=`echo "$Allcommand" |grep "\-H" | awk -F "-H" '{print $2}'`

	if [[ $RotaHost != "" ]]
	then 
		Count=1
		List=`cat $RotaHost`
		ListM=`echo $List`
		Max=`eval echo $ListM | awk '{print NF}'`
			while [[ $Count -le $Max ]];
			do
				HostF=`eval echo $ListM | awk '{print $'$Count'}'`

				## ssh connection check
				CheckConnection=`ssh $HostF > $ZinstBaseRoot/vault/Source/ssh_conn_test.log 2> /dev/null;cat $ZinstBaseRoot/vault/Source/ssh_conn_test.log |grep known; rm -f $ZinstBaseRoot/vault/Source/ssh_conn_test.log`

					if [[ $CheckConnection != "" ]]
					then
						echo $Barr	
						echo "It couldn't connect this host($HostF). Please check this hostname"
						echo $Barr	
					else
						## Install start with target host ##
						## Check the Package or Distribution server
						## Package scp to destination
						zinst_emptyCheck=`ssh $HostF "ls /usr/bin/ |grep zinst"`
							if [[ $zinst_emptyCheck != "" ]]
							then
								zinst_checkDes=`ssh $HostF "cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'"`
								zinst_checkLoc=`cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`

									if [[ $zinst_checkDes < $zinst_checkLoc ]];
									then
										scp /usr/bin/zinst $HostF:/usr/bin/
									fi
							else
								scp /usr/bin/zinst $HostF:/usr/bin/
							fi

						#### Check SSH command ########
						Check_sshC=`echo $RotaCommand |awk '{print $1}'|grep ^ssh$`
							if [[ $Check_sshC != "" ]]
							then
								RotaCommand=`echo $RotaCommand | awk -F 'ssh' '{print $2}'`
								szinst=""
							fi
						ssh $HostF "mkdir -p $ZinstBaseRoot/vault/Source"
						echo ""

						#### Local package scp to destination ####
						LocalPkg=`echo $RotaCommand | sed -e 's/^[a-z]* //g'`
						LocalPkg_Num=`echo $LocalPkg | awk '{print NF}'`
						CountSub=1
							while [[ $CountSub -le $LocalPkg_Num ]]
							do
								LocalRealPkg=`echo $LocalPkg | awk '{print $'$CountSub'}'`
								Check_sshC=`echo $Allcommand |awk '{print $1}'|grep ^ssh$`
									if [[ $Check_sshC = "" ]]
									then
										LocalPkg_chk=`cd $PWD;ls |grep "^$LocalRealPkg"`
									fi

									if [[ $LocalPkg_chk != "" ]]
									then
										scp $LocalRealPkg $HostF:$ZinstSourceDir/
									fi

								let CountSub=CountSub+1
							done;
						ssh $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir ;$szinst $RotaCommand $h_SetCommand";
					fi
				let Count=Count+1
			done
		exit 0;
	fi



Save_restore_file(){

### Save a restore file 
Save_File_num=`ls $Save_Dir/ |egrep ^$Save_Filename | awk '{print NR}' |tail -1`

    if [[ $Save_File_num = ""  ]];
    then
        Save_File_num="0"
    fi

MakeANum=1
let MakeANum=MakeANum+$Save_File_num
Naming="$Save_Filename.$MakeANum"

	if [[ $Package_list = "-same" ]]
	then
		Package_list="-same"
	elif [[ $Package_list = "-downgrade" ]]
	then
		Package_list="-downgrade"
	else
		Package_list=""
	fi

echo "# --- Last touched by \"`whoami`\" --- " > $Save_Dir/$Naming
echo "# --- Last command \" zinst $Allcommand $Package_list \" " >> $Save_Dir/$Naming
echo "# Date: `date +%Y.%m.%d_%T` " >> $Save_Dir/$Naming
echo "#"  >> $Save_Dir/$Naming
echo "# zinst package installer all-configuration backup-list for the package restore" >> $Save_Dir/$Naming
zinst ls | awk 'NR>2{print "Package install",$5".zinst"}' >> $Save_Dir/$Naming
echo "- - - " >> $Save_Dir/$Naming
zinst set | awk 'NR>2{print "Package settting",$1}' >> $Save_Dir/$Naming
}




INTELLi(){

Dist=$ZinstBaseRoot/
PkgInfoDir=$Dist/vault
Package_N=$2
Package_name=`echo $Package_N |awk -F '-' '{print $1}'`

curl $Dist_server/checker/package_dist_list.info > $PkgInfoDir/package_dist_list.info 2> /dev/null

#cd $PkgInfoDir
#wget $Dist_server/checker/package_dist_list.info



### Package name check
	if [[ `cat $PkgInfoDir/package_dist_list.info | grep "^| $Package_name |"` = "" ]]
	then
		echo $Barr
		echo "Please insert a package name exactly"
		echo $Barr
		exit 0;
	fi


FetchDep=`cat $PkgInfoDir/package_dist_list.info | grep "^| $Package_name " | awk -F '|' '{print $7}' | sed 's/^ //g'`
echo "" > $ZinstBaseRoot/vault/Temp_race.log

	if [[ $FetchDep != " " ]]	
	then
		DepNum=`echo $FetchDep | awk '{print NF}'`
		Count=1
			while [ $Count -le $DepNum ]
			do
				DepPackage=`echo $FetchDep | awk '{print $'$Count'}'`
				Version=`cat $PkgInfoDir/package_dist_list.info |grep "^| $DepPackage |" | awk -F '|' '{print $3}' | sed 's/ //g'`

					if [[ `zinst ls | awk '{print $5}'|grep "^$Package_name-"` < "$DepPackage-$Version" ]]
					then 
						sed -i "/$DepPackage/d"  $ZinstBaseRoot/vault/Temp_race.log
						echo $DepPackage-$Version.zinst >> $ZinstBaseRoot/vault/Temp_race.log
					fi

					while [ 0 -le 3 ]
					do
						SubFetchDep=`cat $PkgInfoDir/package_dist_list.info | grep "^| $DepPackage |" | awk -F '|' '{print $7}' | sed 's/^ //g'`

						SubDepNum=`echo $SubFetchDep | awk '{print NF}'`
						SubCount=1
							while [ $SubCount -le $SubDepNum ]
							do
								SubFetchDepPart=`echo $SubFetchDep | awk '{print $'$SubCount'}'`
								SubVersion=`cat $PkgInfoDir/package_dist_list.info |grep "^| $SubFetchDepPart |" | awk -F '|' '{print $3}' | sed 's/ //g'`
									if [[ `zinst ls | awk '{print $5}'| grep "^$SubFetchDepPart-"` < "$SubFetchDepPart-$SubVersion" ]]
									then 
										sed -i "/$SubFetchDepPart/d"  $ZinstBaseRoot/vault/Temp_race.log
										echo $SubFetchDepPart-$SubVersion.zinst  >> $ZinstBaseRoot/vault/Temp_race.log
									fi	
								DepPackage=`echo $SubFetchDepPart`
								let SubCount=SubCount+1
							done 
						
							if [[ $SubFetchDep = " " ]]
							then
								break;
							fi
					done
				let Count=Count+1
			done

		SortResult=`tac $ZinstBaseRoot/vault/Temp_race.log` 
		rm $ZinstBaseRoot/vault/Temp_race.log
		VersionO=`cat $PkgInfoDir/package_dist_list.info |grep "^| $Package_name |" | awk -F '|' '{print $3}' | sed 's/ //g'`

		IntelContinueCheck=`echo $Allcommand | grep "\-yes"`
			if [[ $IntelContinueCheck != "" ]]
			then
				echo "$SortResult $Package_name-$VersionO.zinst"
				zinst install $SortResult $Package_name-$VersionO.zinst
			fi

		### Show result
		echo $Barr 
		echo " Below package need to be install"
		echo "$SortResult $Package_name-$VersionO.zinst"
		echo $Barr
		echo " Do you want to continue ? (y/n)"
		read Cont
			if [[ $Cont = "y" ]]
			then
				zinst install $SortResult $Package_name-$VersionO.zinst
			fi
	else
		VersionO=`cat $PkgInfoDir/package_dist_list.info |grep "^| $Package_name |" | awk -F '|' '{print $3}' | sed 's/ //g'`
		zinst install $Package_name-$VersionO.zinst
	fi
rm -f $PkgInfoDir/package_dist_list.info

}



Pkg_Install(){

#ProcessPkg=$@
ProcessPkg=$Allcommand

CounterAll=2
ProcessPkgNum=`echo "$ProcessPkg" | awk '{print NF}'`
	while [[ $CounterAll -le $ProcessPkgNum ]]
	do
		Package_list=`echo $ProcessPkg |awk '{print $'$CounterAll'}'`
		Package_org=`echo "$Package_list" |awk -F ".zinst" '{print $1}'`
		Package_orgS=`echo "$Package_list" |awk -F "-" '{print $1}'`
			if [[ $Package_list = "-same" ]]
			then
				Save_restore_file $*
				exit 0;
			fi
		
			if [[ $Package_list = "-downgrade" ]]
			then
				Save_restore_file $*
				exit 0;
			fi

		## Check the Package or Distribution server
		Pkg_result=`cd $PWD;ls |grep $Package_list`
			if [[ $Pkg_result = "" ]];
			then
				DIST=$Dist_server
			else
				DIST=`pwd`
			fi
		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`
		SourceDir=`echo $Package_list | awk -F ".zinst" '{print $1}'`
		############################## Install start without target host ##################################################
		IntelCheck=`echo $Allcommand | grep "\-intel"`
			if [[ $IntelCheck != "" ]]
			then	
				INTELLi $* 
				exit 0;
			fi

		ZinstName=`echo $Package_list | awk -F ".zinst" '{print $1}'`;
		ZinstOrgName=`echo $Package_list | awk -F "-" '{print $1}'`;
			if [[ $Pkg_result != $Package_list ]]
			then
				###  check package by wget ###
				Package_RC=`wget  --spider  $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check ;cat $ZinstSourceDir/tmp_wget_check |grep Remote ;rm -f $ZinstSourceDir/tmp_wget_check`
			fi

		#### check local zinst file
			if [[ $Pkg_result = $Package_list ]]
			then
				Package_RC="Remote file exists."
				alias cp=cp
				CheckDir=`ls $ZinstSourceDir| grep $ZinstName$`
					if [[ $CheckDir = "" ]]
					then
						mkdir $ZinstSourceDir/$ZinstName
					fi
				cp -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list

			fi

			if [[ $Package_RC = "Remote file does not exist -- broken link!!!" ]]
			then
				echo "  "
				echo "  $Package_list Package has not found."
				echo "  "
				exit 0;
			fi
		## Check a same version Package
		Existed_pkg=`ls -l $ZinstDIRs |grep ^l | grep $Package_orgS | awk  '{print $11}' | awk -F '/' '{print $NF}'`
		echo ""
		echo ----- $Package_list -----


		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`
		SameVcheker=`echo $@ |grep "\-same"`
			if [[ $Package_org = $Existed_pkg ]];
			then 
			#########  -same -live option check  ################
				if [[ $SameVcheker = "" ]]
				then
		
					echo "$Barr"
					echo "The Server has a same version of package already"
					echo "Please insert an option like this \"-same\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
 
		DownVcheker=`echo $@ |grep "\-downgrade"`
			if [[ $Package_org < $Existed_pkg ]];
			then
			#########  -downgrade option check  ################
				if [[ $DownVcheker = "" ]]
				then

					echo "$Barr"
					echo "Your package is a older version then exists package version"
					echo "Please insert an option like this \"-downgrade\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
 
		## Unpacking
		mkdir -p $ZinstBaseRoot/vault/Source/$ZinstName
		mkdir -p $ZinstDIRs
		mkdir -p $ZinstBaseRoot/src
		##If you have distribution server. you can setup as below.
		alias cp=cp

		cd $ZinstSourceDir/$ZinstName/
			if [[ $Pkg_result != $Package_list ]]
			then
				wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;rm -f $ZinstSourceDir/tmp_wget_check
			fi

			#########  -same -live option check  ################
			if [[ $SameVcheker != "" ]]
			then
				cd $ZinstSourceDir/$ZinstName/
				rm -f $ZinstSourceDir/$ZinstName/$Package_list
					if [[ $Pkg_result != $Package_list ]]
					then
						wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;rm -f $ZinstSourceDir/tmp_wget_check
					else
						mv -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list	### local file copy
					fi
			fi

		cd $ZinstBaseRoot/vault/Source/$ZinstName
		tar zxf $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		rm -rfv $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		rm -Rf $ZinstDIRs/$ZinstOrgName
		ln -sf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
		cd $ZinstDIRs/$ZinstOrgName; chmod 644 $ZICF
 
		## Value set
		Packagename=`cat $ZICF |grep ^PACKAGENAME |awk '{print $3}'`
		ZinstPackageDir="$ZinstDIRs/$Packagename"
		Version=`cat $ZICF |grep ^VERSION |awk '{print $3}'`
		Authorized=`cat $ZICF |grep ^AUTHORIZED |awk '{print $3}'` 
		Owner=`cat $ZICF |grep ^OWNER |awk '{print $3}'`
		Group=`cat $ZICF |grep ^GROUP |awk '{print $3}'`
		Perm=`cat $ZICF |grep ^PERM |awk '{print $3}'`
		Custodian=`cat $ZICF |grep ^CUSTODIAN |awk '{print $3}'`
		Crontab=`cat $ZICF |grep ^CRON |awk 'NR==1{print $1}'`
		CrontabRow=`cat $ZICF |grep ^CRON |awk '{print NR}' |tail -1`
		Description=`cat $ZICF |grep ^DESCRIPTION |awk '{print $0}'`

		### zinst default checkr
		## zinst set checker
		ZinstSetCheck=`cat $ZinstBaseRoot/vault/zinst/zinst_set.list | grep ZinstSet | awk '{print $1}'`
		ZinstSetTitle="#==========================ZinstSet==========================="
			if [[ $ZinstSetCheck != $ZinstSetTitle ]];
			then
				mkdir -p $ZinstBaseRoot/vault/zinst/
				echo "$ZinstSetTitle" > $ZinstBaseRoot/vault/zinst/zinst_set.list
				chgrp wheel $ZinstBaseRoot/vault/zinst/zinst_set.list
				echo "   -------> $ZinstBaseRoot/vault/zinst/zinst_set.list has been created for the zinst :)"
				echo " "
			fi
		mkdir -p $ZinstBaseRoot/vault/Source $ZinstBaseRoot/zinst

		### Dependency-checker file
		## zinst dependency checker
		ZinstDepCheck=`ls -ali  $ZinstBaseRoot/vault/zinst/ |grep .dependency.list`
		ZinstDepTitle="#==========================ZinstDep==========================="
			if [[ $ZinstDepCheck = "" ]];
			then
				mkdir -p $ZinstBaseRoot/vault/zinst/
				echo "$ZinstDepTitle" > $ZinstBaseRoot/vault/zinst/.dependency.list
				chgrp wheel $ZinstBaseRoot/vault/zinst/.dependency.list
				echo " "
			fi
		
		### Make a Blank .file.list
		echo "echo "$Packagename-$Version has been installed" " > .file.list

		## Package Dependency check - on no-over write
		Dep_checkerNum=`cat ./$ZICF  |grep "^ZINST requires pkg" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
				Dep_checker=`cat ./$ZICF  |grep "^ZINST requires pkg" | awk 'NR=='$DepCounter'{print $4}'`
				Dep_list_check=`zinst ls |awk -F '-  ' '{print $2}' | awk -F '-' '{print $1}' | egrep "^$Dep_checker$"`
					if [[ $Dep_checker != "" ]]
					then    

						if [[ $Dep_list_check = "" ]]
						then
							echo ""
							echo " ===== You need to install the \"$Dep_checker\" package first before the $Packagename install ===="
							rm -Rf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
							exit 0;
						fi

					fi

				### Dependency comment check
				echo "# Dependency package: $Dep_checker"  >> .file.list
				let DepCounter=DepCounter+1
			done;
 
		#### [File parser] #####
		### File set
		## Directory make for the File copy
		CPP=( `cat $ZICF |grep ^FILE | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPP != ""  ]]; 
			then
				echo "mkdir -p ${CPP[*]%/*}" >> .file.list
			fi
		## File copy
		#echo "File copy" >> .file.list
		cat $ZICF |grep ^FILE | awk '{print "cp",$6,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Permission
		cat $ZICF |grep ^FILE | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Owner 
		#cat $ZICF |grep ^FILE | awk '{print "chown",'\"$Owner\"',"'$ZinstBaseRoot'/"$5}' >> .file.list
		cat $ZICF |grep ^FILE | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Group 
		cat $ZICF |grep ^FILE | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list


		#### [Symbolic parser] #####
		### Symbolic link set
		## Directory makes for the simbolic
		LNP=( `cat $ZICF |grep ^SYMB | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $LNP != ""  ]]; 
			then
				echo "mkdir -p ${LNP[*]%/*}" >> .file.list
			fi

		## make a Symbolic
		#echo "Make a symbole" >> .file.list
		cat $ZICF |grep ^SYMB | awk '{print "ln -sf '$ZinstBaseRoot'/"$6, "'$ZinstBaseRoot'/"$5}' >> .file.list

		## Symb Permission
		#cat $ZICF |grep ^SYMB | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list
		## Symb Owner 
		#cat $ZICF |grep ^SYMB | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list
		## Symb Group 
		#cat $ZICF |grep ^SYMB | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list


		#### [Configuration file parser] #####
		### Config file set

		## Directory makes for the Config
		CPC=( `cat $ZICF |grep ^CONF | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPC != ""   ]];
			then						
				echo "mkdir -p ${CPC[*]%/*}" >> .file.list
				echo "touch  ${CPC[*]%/*}""/_zinst" >> .file.list
			fi
		#echo "Config file set" >> .file.list
		cat $ZICF |grep ^CONF | awk '{print "cp",$6,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Permission
		cat $ZICF |grep ^CONF | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Owner 
		cat $ZICF |grep ^CONF | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Group 
		cat $ZICF |grep ^CONF | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list

		#### [Change parse detail]
		## change Permission
		sed -i 's/chmod - /chmod '$Perm' /g' ./.file.list
		## change Owner
		sed -i 's/chown - /chown '$Owner' /g' ./.file.list
		## change Group
		sed -i 's/chgrp - /chgrp '$Group' /g' ./.file.list
		## change direction
		sed -i 's/\.\./\./g' ./.file.list

		#### [Command line parser] #####
		## Command line excute
		cat $ZICF |grep ^COMM | awk '{print $0}' | sed -e 's/COMM//g' >> .file.list


		### Config file set
		#### [Zinst Set parser]
		cat $ZICF |grep '^ZINST set' |grep set | awk '{print "zinst set","'$Packagename'."$3"="$4}' >> .file.list


		### Package Dependency check
		#### [Zinst Dep parser]
		Dep_checkerNum=`cat ./$ZICF  |grep "^ZINST requires" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
			ZinstDeps=`cat $ZICF |grep '^ZINST requires' | awk 'NR=='$DepCounter`
				if [[ $ZinstDeps != "" ]];
				then
					ZinstDepChk=`cat $ZICF |grep '^ZINST requires' | awk '{print $4" - package has a dependency with ( '$Packagename' )"}'`
					ZinstCurrentDeps=`cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep "$ZinstDepChk"`
						if [[ $ZinstCurrentDeps = ""  ]];
						then
							echo "$ZinstDepChk"  >> $ZinstBaseRoot/vault/zinst/.dependency.list
						fi
				fi
			let DepCounter=DepCounter+1
			done;	

		#### [Cron parser] #####
		### Condtab set

			if [[ $Crontab = "CRON" ]];
			then
				Counter=1
					while [ $Counter -le $CrontabRow ]
					do
						echo "##$Packagename-$Version Cron Scheduler"  > $Packagename.cron	
						cat $ZICF |grep ^CRON | awk 'NR=='$Counter'{print $5,$6,$7,$8,$9,"'$ZinstBaseRoot'/"$10," #'$Packagename'"}' >> $Packagename.cron
						CronUser=`cat $ZICF |grep ^CRON | awk 'NR=='$Counter'{print $3}'`
							if [[ $CronUser = "-" ]];
							then 
								CronUser=$Owner
							fi
						TargetCron=/var/spool/cron/$CronUser
						echo "#### $TargetCron"  >> .file.list
						Result=`cat $TargetCron |grep $Packagename`
							if [[ $Counter = "1" ]];
							then
								if [[ $Result != "" ]];
								then
									echo "---==== Crontab has a configuration about this already ====---";
									sed -i "/$Packagename/d" $TargetCron;
									echo "---==== Crontab has been changed as a new configration ====---"
									cat $Packagename.cron >> $TargetCron
								else
									cat $Packagename.cron >> $TargetCron
								fi
							else
								cat $Packagename.cron >> $TargetCron
							fi
					let Counter=Counter+1
					done;
			#rm $Packagename.cron
			fi
		## Excute command list and file & package file remove
		sed -i 's/\t//g' ./.file.list
		sed -i 's/^ cp/cp/g' ./.file.list
		sh ./.file.list; zinst ls -files $Packagename
		rm -f $Dist_server/$Package_list

## Out of 3 steps older package clean - Todo
#echo 3333333333333333

		## Package listup
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		ls -l $ZinstDIRs/ | awk '{print $6,$7,$8,"-", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist

		Command_p="+ Install"
		echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ZinstName  " >> $History_LOG 
		let "Host_index=$Host_index + 1";

		############################## Install end without target host ##################################################	
		let CounterAll=CounterAll+1
	done

	############################## Setting config  #################################
	if [[ $SetCommand != "" ]]
	then
		SetOptionValue="$SetCommand"
		Pkg_Set	$*
	fi

Save_restore_file $*
}



Pkg_Set() {

### Base information
	if [[ $SetOptionValue = "" ]];
	then
	    cat  $ZinstBaseRoot/vault/zinst/zinst_set.list
	else
		SetTarget=`echo "$SetOptionValue" | awk -F "=" '{print $1}'`	
	    ZinstSet=`echo "$SetOptionValue" | sed -e "s/$SetTarget=//g"`
	    Option=`echo $SetTarget | awk -F '.' '{print $2}'`
	    PackageS=`echo $SetTarget | awk -F '.' '{print $1}'`

	    SetZICF="$PackageS.zicf"
	    ## Check a set list in zinst
	    CurrentSet=( `cat $ZinstBaseRoot/vault/zinst/zinst_set.list | grep ^$SetTarget` )
	    CurrentSetCheck=`echo "$CurrentSet" | awk -F "=" '{print $1}'`
	    CurrentSetCheck2=`echo "$CurrentSet" | sed -e "s/$CurrentSetCheck=//g"`

		Setchecker=`ls $ZinstDIRs |grep $PackageS`
			if [[ $Setchecker != ""  ]];
			then
			## Find a current set 
			Grep_ZICF=`cat $ZinstDIRs/$PackageS/$SetZICF |grep ^CONF | awk '{print "'$ZinstBaseRoot'/"$5}'`
				if [[ $Grep_ZICF = "" ]]
				then 
					echo "$Barr"
					echo "$PackageS has not a config file as a zicf or we couldn't find any config"
					echo "Please check this zicf file of the package."
					echo ""
					echo "ex) zinst list -zicf $PackageS | grep ^CONF <--- Result is empty."
					echo " If so, you should change the file type from FILE to CONF "
					echo "$Barr"
					exit 0;
				fi
			Conf_Dir="${Grep_ZICF[*]%/*}"
			Grep_Option=`grep "^$Option=" $Conf_Dir/*`
				if [[ $Grep_Option = "" ]]
				then
					Grep_Option=`grep "^$Option = " $Conf_Dir/*`
						if [[ $Grep_Option = "" ]]
						then 
							Grep_Option=`grep "^$Option " $Conf_Dir/*`
						fi
				fi

			## Parsing
			Conf_File=${Grep_Option%:*}
				if [[ $Comm_x = set ]];
				then
					Command_p=" * setup "
				fi

				### Current Setting check and replace
				if [[ $SetTarget = $CurrentSetCheck ]];
				then
					sed -i "/$SetTarget/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
					echo "$SetOptionValue" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
					cat  $ZinstBaseRoot/vault/zinst/zinst_set.list |grep ^$SetTarget
			
					Equiltype1=`grep "$Option=$CurrentSetCheck2" $Conf_File`
					Equiltype2=`grep "$Option = $CurrentSetCheck2" $Conf_File`
					Equiltype3=`grep "$Option $CurrentSetCheck2" $Conf_File`
#			Equiltype4=`grep "$Option</name><value>$CurrentSetCheck2" $Conf_File`
#echo "s/$Option $CurrentSetCheck2/$Option $ZinstSet/g"
					Check_Conf_File=`grep \/ $Conf_File`
						if [[ $Check_Conf_File != ""  ]];
						then
							sed -i "s/\//%%%/g" $Conf_File
							CurrentSetCheck2=`echo "$CurrentSetCheck2" | sed -e "s/\//%%%/g"`
							ZinstSet=`echo "$ZinstSet" |  sed -e "s/\//%%%/g"`
								if [[ $Equiltype1 != "" ]];
								then 
									sed -i "s/$Option=$CurrentSetCheck2$/$Option=$ZinstSet/g" $Conf_File
								elif [[ $Equiltype2 != "" ]]; then
									sed -i "s/$Option = $CurrentSetCheck2$/$Option = $ZinstSet/g" $Conf_File
								elif [[ $Equiltype3 != "" ]]; then
									sed -i "s/$Option $CurrentSetCheck2$/$Option $ZinstSet/g" $Conf_File
#								elif [[ $Equiltype4 != "" ]]; then
#									sed -i "s/$Option<\/name><value>$CurrentSetCheck2/$Option<\/name><value>$ZinstSet/g" $Conf_File
								fi		
							sed -i "s/%%%/\//g" $Conf_File
						fi
	
						if [[ $Equiltype1 != "" ]];
						then 
							sed -i "s/$Option=$CurrentSetCheck2$/$Option=$ZinstSet/g" $Conf_File
						elif [[ $Equiltype2 != "" ]]; then
							sed -i "s/$Option = $CurrentSetCheck2$/$Option = $ZinstSet/g" $Conf_File
						elif [[ $Equiltype3 != "" ]]; then
							sed -i "s/$Option $CurrentSetCheck2$/$Option $ZinstSet/g" $Conf_File
#						elif [[ $Equiltype4 != "" ]]; then
#							sed -i "s/$Option<\/name><value>$CurrentSetCheck2/$Option<\/name><value>$ZinstSet/g" $Conf_File
						fi		
					echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $Pkg_list  " >> $History_LOG
				else
				    echo "$SetOptionValue" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
					echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $Pkg_list  " >> $History_LOG
				fi
			Save_restore_file $*
		else
			echo " --- Package name has not found. Please insert a package name & option exactly ---"
		fi
	fi

}

Pkg_Remove(){
#echo $Pkg_list 
	if [[ $Pkg_list = "" ]]
	then
		echo "=============== Please insert a package name as you need to see ============"
	else
		Counter=2
		ProcessPkg=$@
		ProcessPkgNum=`echo "$ProcessPkg" | awk '{print NF}'`
			while [[ $Counter -le $ProcessPkgNum ]]
			do
				Pkg_list=`echo "$ProcessPkg" | awk '{print $'$Counter'}'`
				ZinstOrgName=`echo $Pkg_list| awk -F "-" '{print $1}'`
				Package_RC=`ls $ZinstDIRs |egrep "^$ZinstOrgName$"`
					if [[ $ZinstOrgName != $Package_RC ]]
					then
						echo "  "
						echo "  $Pkg_list Package has not found."
						echo "  "
						exit;
					fi
				RmResult=`cat $ZinstDIRs/$ZinstOrgName/.file.list |grep ^echo | awk '{print $2}'`
					if  [[ $RmResult != "" ]]; 
					then
						cd $ZinstDIRs/$ZinstOrgName
						RmTargetCron=`cat .file.list  | grep \#### | awk '{print $2}'`
						RmPkg_list=`cat .file.list |grep ^echo |awk '{print $2}'`
						RmDepChecker=`cat $ZinstBaseRoot/vault/zinst/.dependency.list | grep ^$ZinstOrgName |awk '{print $9}' `
							if [[ $RmDepChecker != "" ]]
							then
								echo "===== You have to remove as below package(s) ===== "
								echo "$RmDepChecker"
								echo "================================================== "
								echo "= $ZinstOrgName has a dependency with that. = "
								exit 0;
							fi
						sed -i '/'$ZinstOrgName'/d' $ZinstBaseRoot/vault/zinst/.dependency.list
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^cp | awk '{print "rm -Rfv",$3}'`
						RmMv=`cat $ZinstDIRs/$ZinstOrgName/.file.list |grep ^mv  | awk '{print $2}' | awk -F '/' '{print $NF}'`
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mv | awk '{print "rm -Rfv",$3"$RmMv"}'`
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^ln | awk '{print "rm -Rfv",$3}'`
						RmDir=`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mkdir |awk '{print "ls", $3}'`
							if [[ $RmDir = "" ]];
							then
								`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mkdir |awk '{print "rmdir", $3}'`
							fi
						RmZinstName=`ls $ZinstBaseRoot/vault/Source/ |grep $Pkg_list`
						rm -Rfv $ZinstDIRs/$ZinstOrgName
						rm -Rfv $ZinstBaseRoot/vault/Source/$RmPkg_list
 						echo "########## $RmPkg_list package has been removed ######## "
						sed -i "/$ZinstOrgName/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
							if [[ $RmTargetCron != "" ]]
							then
								sed -i "/$ZinstOrgName/d" $RmTargetCron
							fi
					else
						echo "============= $Pkg_list package has not installed =================="
					fi
				Command_p="- Remove"
				echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $RmPkg_list  " >> $History_LOG
				let Counter=Counter+1
			done
	fi

cd $ZinstDIRs
Save_restore_file $*

}



Pkginst_list(){

### Check file of the phrase
Pkg_file_checker=`echo $Pkg_file |grep "/"`
CurrentCheck=`echo $Pkg_file |grep "^./"`

	if [[ $Pkg_list = "-files" ]]
	then
			if [[ $Pkg_file = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				if [[ $Pkg_file_checker != ""  ]]
				then
						if [[ $CurrentCheck != "" ]]
						then
							PWD=`pwd | sed 's/\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/\.\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e "s/%%%/$PWD\//g"`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/%%%/\//g'`
						fi
					cd $ZinstDIRs/
					File_list=`ls`
					File_list_Num=`echo $File_list |awk '{print NF}'`
					CounterFM=1
    
					#####  loop start for the package find each directories
						while [[ $CounterFM -le $File_list_Num ]]
						do
							Package_dir=`echo $File_list | awk '{print $'$CounterFM'}'`
							cd $ZinstDIRs/$Package_dir
							Package_finder=`egrep "$Pkg_file_checker$" .file.list | grep "^cp" |awk '{print $3}' 2> /dev/null`
							if [[ $Package_finder != "" ]]
							then
								cd $ZinstDIRs/
								Result_file=`ls -ali | grep $Package_dir- | awk -F '/' '{print $NF}'`
								echo "$Result_file  <-------   $Pkg_file_checker"
							fi
        
							cd $ZinstDIRs/
							let CounterFM=CounterFM+1
						done
        
						if [[ $Result_file = "" ]]
						then
							echo " ---- Could not find any package ---- "
						fi	
					exit 0;
				fi
		ZinstOrgName=`echo $Pkg_file| awk -F "-" '{print $1}'`
		cd $ZinstDIRs/$ZinstOrgName
		cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^cp | awk '{print $3}'
	fi
	elif [[ $Pkg_list = "-zicf" ]]
	then
			if [[ $Pkg_file = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo $Pkg_file| awk -F "-" '{print $1}'`
				cd $ZinstDIRs/$ZinstOrgName
				cat $ZinstDIRs/$ZinstOrgName/$ZinstOrgName.zicf
			fi
	elif [[ $Pkg_list = "-dep" ]]
	then
			if [[ $Pkg_file = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo $Pkg_file| awk -F "-" '{print $1}'`
				cd $ZinstDIRs/$ZinstOrgName
				cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep ^$ZinstOrgName
			fi
	else
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		ls -l $ZinstDIRs/ | awk '{print $6,$7,$8,"\t -", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist
		cat $ZinstBaseRoot/vault/zinst/.pkglist
	fi
}


Pkg_Find(){

### Check DNS status
#curl $Dist_server/checker/status.html > $ZinstSourceDir/.checkdist
#CheckDistURL=`cat $ZinstSourceDir/.checkdist |grep "OK"`
#	if [[ $CheckDistURL != "OK" ]]
#	then
#		Dist_server="http://10.35.35.235:8000/vault/Source"
#	fi

Allpackges=$@
Check_local=`echo "$Allpackges" |grep "\-local"`

	if [[ $Check_local != "" ]]
	then
		Pkg_list=`echo "$Allpackges" |sed -e 's/\-local//g' | awk '{print $3}'`
		    if [[ $Pkg_list = "" ]]
		    then
				ls $ZinstSourceDir | grep .zinst
    
		    else
			   ls $ZinstSourceDir | grep $Pkg_list  | grep .zinst 
		    fi
	else
			if [[ $Pkg_list = "" ]];
			then
				curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$
			else
				curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$ | grep $Pkg_list 
			fi
	
	fi

}





History(){
tail $Pkg_list $History_LOG
}


Cront_Command(){
	case "$Pkg_list" in
	-l)
		crontab -l
	;;
	-e)
		crontab -e
	;;
	-u)
	case "$Hostname" in
		-l)
			crontab -u $Pkg_file -l
		;;
		-e)
			crontab -u $Pkg_file -e
		;;
		*)
			echo " - Please insert an option as you need to change correctly - "
			echo " ex) 'zinst crontab -e' to edit crontab"
			echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
		;;
	esac
	;;
	*)
		echo " - Please insert an option as you need to change correctly - "
		echo " ex) 'zinst crontab -e' to edit crontab"
		echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
	;;
	esac

}


Zinst_Version(){
 echo "Zinst version" `cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
}



Daemon_start(){
Counter=2
ProcessPkg=$@
ProcessPkgNum=`echo "$ProcessPkg" | awk '{print NF}'`
Command_p="# Daemon"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ProcessPkg  " >> $History_LOG
	while [[ $Counter -le $ProcessPkgNum ]]
	do
		Pkg_list=`echo "$ProcessPkg" | awk '{print $'$Counter'}'`
		/sbin/service $Pkg_list start > $ZinstBaseRoot/vault/Source/Daemon_ctrl.log 2> /dev/null
		cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		DeamonLog=`cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log | awk 'NR==1'`		
		echo "                    `whoami` : "#    " - $Pkg_list: $DeamonLog  " >> $History_LOG
		let Counter=Counter+1
		rm -f $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
	done
}


Daemon_restart(){
Counter=2
ProcessPkg=$@
ProcessPkgNum=`echo "$ProcessPkg" | awk '{print NF}'`
Command_p="# Daemon"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ProcessPkg  " >> $History_LOG
	while [[ $Counter -le $ProcessPkgNum ]]
	do
		Pkg_list=`echo "$ProcessPkg" | awk '{print $'$Counter'}'`
		/sbin/service $Pkg_list restart > $ZinstBaseRoot/vault/Source/Daemon_ctrl.log 2> /dev/null
		cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		DeamonLog=`cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log | awk 'NR==1'`		
		echo "                    `whoami` : "#    " - $Pkg_list: $DeamonLog  " >> $History_LOG
		let Counter=Counter+1
		rm -f $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
	done
}


Daemon_stop(){
Counter=2
ProcessPkg=$@
ProcessPkgNum=`echo "$ProcessPkg" | awk '{print NF}'`
Command_p="# Daemon"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ProcessPkg  " >> $History_LOG
	while [[ $Counter -le $ProcessPkgNum ]]
	do
		Pkg_list=`echo "$ProcessPkg" | awk '{print $'$Counter'}'`
		/sbin/service $Pkg_list stop > $ZinstBaseRoot/vault/Source/Daemon_ctrl.log 2> /dev/null
		cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		DeamonLog=`cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log | awk 'NR==1'`		
		echo "                    `whoami` : "#    " - $Pkg_list: $DeamonLog  " >> $History_LOG
		let Counter=Counter+1
		rm -f $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
	done

}


Zinst_selfupdate(){

### Check DNS status
#	curl $Dist_server/checker/status.html > $ZinstSourceDir/.checkdist
#	CheckDistURL=`cat $ZinstSourceDir/.checkdist |grep "OK"`

#		if [[ $CheckDistURL != "OK" ]]
#		then
#			Dist_server="http://10.35.35.235:8000/vault/Source"
#		fi
cd ~/;
rm -f zinst
wget  $Dist_server/zinst;
chmod 755 zinst;
chgrp wheel zinst;

mkdir -p $ZinstBaseRoot/vault/Source/bin
Number=`ls $ZinstBaseRoot/vault/Source/bin/ |egrep ^zinst.bak. |awk '{print NR}' |tail -1`
	if [[ $Number = ""  ]];
	then
		Number="0"
	fi
mv $ZinstBaseRoot/vault/Source/bin/zinst $ZinstBaseRoot/vault/Source/bin/zinst.bak.$Number;
cp zinst $ZinstBaseRoot/vault/Source/bin/zinst;
rm -f /usr/bin/zinst;
ln -sf $ZinstBaseRoot/vault/Source/bin/zinst /usr/bin/zinst;
echo "Zinst version" `cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`

Command_p="@ Self-update"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ProcessPkg  " >> $History_LOG

} 




Help_Command(){

echo "----------------------------------------------------------------------------------------"
echo "    You can control the linux machines easierly by this zinst command."
echo ""
echo "zinst	[command]	[Target Types]		[Package Name] [-h or -H] [Targe Host]"
echo "........................................................................................"
echo "	 ssh		[Command]				*Host requires	 "
echo "	 install				[Package_name]	 "
echo "			[-same]			[Package_name]	 "
echo "			[-set]			[Package.option=value]	 "
echo "			[-downgrade]		[Package_name]	 "
echo "			[-intel][-yes]		[Package_name]	*Careful: Auto update"
echo "	 remove					[Package_name]	 "
echo "	 set					[Blank]			 "
echo "			[Package.option=value]			 "
echo "	 list					[Blank]	 "
echo "			[-files]		[Package_name]	 "
echo "			[-files]		[/Dir/File-name]	 "
echo "			[-zicf]			[Package_name]	 "
echo "			[-dep]			[Package_name]	 "
echo "	 restore	[-file]			[Save file_name]	 "
echo "			[-igor]			 "
echo "	 start					[Daemon_name]	 "
echo "	 stop					[Daemon_name]	 "
echo "	 restart				[Daemon_name]	 "
echo "	 crontab	[-e]						 "
echo "			[-l]"
echo "	 find					[Blank]			"
echo "						[Package_name]			"
echo "			[-local]		[Package_name]			"
echo "	 mcp		[local-files]		[Destination]	*Host requires"
echo "	 history	[-range]"
echo "	 -version			"
echo "	 self-update			"
echo "	 *, help		"
echo ""
echo "----------------------------------------------------------------------------------------"
echo " -h is target host, -H is targe file of hostlist"
echo " ex) zinst i sample-1.0.0.zinst -h web01.news web02.news web0{3..5}.news"
echo " ex) zinst i sample-1.0.0.zinst -H ./server_list.txt"
echo "----------------------------------------------------------------------------------------"

}



Package_restore(){
Types=$2
Restore_File=$3
	if [[ $Types != ""  ]]
	then
			if [[ $Restore_File = "" ]]
			then
				echo $Barr
				echo " --- Parse error: Please insert a information exactly. ---"
				echo " --- zinst restore -file [Save filename]               ---"
				echo " --- or zinst restore -igor                            ---"
				echo $Barr
				exit 0;	
			fi
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi

RestoreFile_checkr=`ls $Restore_File`
	if [[ $RestoreFile_checkr != $Restore_File ]]
	then
		echo $Barr
		echo " --- Could not find save file as you typed.            ---"
		echo " --- Plese insert a file name exactly.                 ---"
		echo $Barr
	fi

	if [[ $Types = "-file" ]]
	then
		cat $RestoreFile_checkr |egrep "^Package" | sed 's/Package/zinst/g' |  sed 's/settting/set/g'
	elif [[ $Types = "-igor" ]]
	then
		echo $Barr
		echo " Igor system will be launched" 
		echo $Barr
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi
}




	case "$Comm_x" in
    i*)
        Pkg_Install $*
    ;;
    set)
        Pkg_Set $*
    ;;
    rem*)
        Pkg_Remove $*
    ;;
    start)
        Daemon_start $*
    ;;
    stop)
        Daemon_stop $*
    ;;
    restart)
        Daemon_restart $*
    ;;
#    search)
#        Pkg_Search
#    ;;
    his*)
        History
    ;;
    self-up*)
        Zinst_selfupdate 
    ;;
    cront*)
        Cront_Command 
    ;;
    l*s*)  
        Pkginst_list $*
    ;;
    restore)
        Package_restore $*
    ;;
    find)
        Pkg_Find $*
    ;;
    -v*)
        Zinst_Version 
    ;;
    *)
        Help_Command
    ;;
	esac

exit 0;
