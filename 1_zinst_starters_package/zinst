#!/bin/bash   
# GSshop package install manager   
# Made by Ralf Yang
# ralf.yang@gsshop.com & goody80762@gmail.com
export TIME_STYLE="+%b %d %R"

Barr="======================================================================="
BARR="#############################################################"
ROWW="============================================================="


VERSION=3.0.6
zinst_group=wheel

### Base information
### ------ Config Area -----
Dist_server="http://DISTsERVERsET/"
sed -i "/DISTsERVERsET/d" /etc/hosts;echo "DISTsERVERIp   DISTsERVERsET" >> /etc/hosts
ZinstBaseRoot="RootDirectorY"
ZinstDIRs="$ZinstBaseRoot/zinst"
ZinstSourceDir="$ZinstBaseRoot/vault/Source"
### ------ Config Area -----


export ZinstDir="$ZinstBaseRoot"
### Config about of Save file
Save_Dir="$ZinstBaseRoot/z/save"
Save_Filename="zinst-save"
CheckSaveDir=`ls $ZinstBaseRoot/z 2> /dev/null |grep save`
	if [[ $CheckSaveDir = "" ]]
	then
		mkdir -p $Save_Dir
	fi

	

PackageAll=$@

#########################################################################################
############################ zinst parsing engine start #################################

### Parsing for Host list
HostCheck=`echo "$PackageAll" |grep "\-h\|\-H"`
	if [[ $HostCheck != "" ]]
	then
		PackageArry=(`echo "$PackageAll" | awk -F ' -[h|H]' '{print $1}'`)
		HostArry=(`echo "$PackageAll" | awk -F ' -[h|H]' '{print $2}'`)
	else 
		PackageArry=(`echo $PackageAll`)
	fi
	
	
### Get Command Type
CommandX=${PackageArry[0]}
### Re-org for Set command
	if [[ $CommandX = "set" ]]
	then
		PackageArry[1]="-set ${PackageArry[1]}"
		PackageArry=( ${PackageArry[@]}  )
	fi

### Hostlist file check
Hostlist_File=`echo $PackageAll | grep " \-H "`


	if [[ $Hostlist_File != "" ]]
	then
		HostlistV="1"
	fi


### Get Package Array
PackageArryNum=${#PackageArry[@]}


### Remove install command
PackageArry[0]=""

MidPackageArry=${PackageArry[@]}

	Counter=1
	SubCounter=0
	while [[ $Counter -lt $PackageArryNum ]]
	do
		CheckMum=${PackageArry[$Counter]}
		CheckMumResult1=`echo "$CheckMum" |egrep "^-"`

			### Set value patch
			if [[ $CheckMumResult1 = "-set" ]]
			then
				PackageArrySet[$SubCounter]=${PackageArry[$Counter]}
				PackageArrySet[$SubCounter+1]=${PackageArry[$Counter+1]}
				PackageArry[$Counter]=""
				PackageArry[$Counter+1]=""
				let SubCounter=SubCounter+2
				let Counter=Counter+1
			elif [[ $CheckMumResult1 != "" ]]
			then
				PackageArryOption[$SubCounter]=${PackageArry[$Counter]}
				PackageArry[$Counter]=""
				let SubCounter=SubCounter+1
			fi


	let Counter=Counter+1
	done

	HostOptionCheck=`echo "${HostArry[@]}" |grep "\-set\|\-same\|\-downgrade\|\-stable"`
	HostArryNum=${#HostArry[@]}
	if [[ $HostOptionCheck != "" ]]
	then
	HostCounter=0
		while [[ $HostCounter -lt $HostArryNum ]]
		do
			CheckMum=${HostArry[$HostCounter]}
			CheckMumResult1=`echo "$CheckMum" |egrep "^-"`
			### Set value patch
			if [[ $CheckMumResult1 = "-set" ]]
			then
				PackageArrySet[$SubCounter]=${HostArry[$HostCounter]}
				PackageArrySet[$SubCounter+1]=${HostArry[$HostCounter+1]}
				HostArry[$HostCounter]=""
				HostArry[$HostCounter+1]=""
				let SubCounter=SubCounter+2
				let HostCounter=HostCounter+1
			elif [[ $CheckMumResult1 != "" ]]
			then
				PackageArryOption[$SubCounter]=${HostArry[$HostCounter]}
				HostArry[$HostCounter]=""
			fi
			let HostCounter=HostCounter+1
		done
	fi

	## Package Version making auto
	Counter=1
	while [[ $Counter -lt $PackageArryNum ]]
	do
		### Package version get from latest package list
		if [[ ${PackageArry[$Counter]} != ""  ]]
		then
			ActualPkg=${PackageArry[$Counter]}

			### Full Package name check
			FullnameC=`echo "${PackageArry[$Counter]}" |grep "\.zinst"`
			StableOptionCheck=`echo "${PackageArryOption[@]}" |grep "\-stable"`
				CheckCommandX=`echo $CommandX |egrep "^i"`
				if [[ $CheckCommandX != "" ]]
				then
					if [[ $StableOptionCheck != "" ]]
					then
							if [[ $FullnameC != "" ]]
							then 
								PackageArry[$Counter]=`zinst find ^${PackageArry[$Counter]}`
							else				
								PackageArry[$Counter]=`zinst find ^${PackageArry[$Counter]}- | tail -1`
							fi
    
							if [[ ${PackageArry[$Counter]} = "" ]]
							then 
								echo "$BARR"
								echo "Which one is correct as you want in below list ( $ActualPkg )"
								echo "$ROWW"
								zinst find $ActualPkg
								echo "$BARR"
							exit 0;
							fi
    
					fi
				fi
		fi

	let Counter=Counter+1
	done


### Hostlist file check

	if [[ $HostlistV = "1" ]]
	then
		HostFileCheck=`cat ${HostArry[@]} 2> $ZinstDIRs/.Hostcheck 1> /dev/null ;cat $ZinstDIRs/.Hostcheck`
		if [[ $HostFileCheck = "" ]]
		then
			HostArry=(`cat ${HostArry[@]}`)
		else 
			echo "$Barr"
			echo " Requires filename for listing exactly. Please make sure the filename "
			echo "$Barr"
			exit 0;

		fi
		rm -f $ZinstDIRs/.Hostcheck

	fi


### Hostname change to regexp in Bash
Hostlist=${HostArry[@]}
HostCount=${#HostArry[@]}

	CountExt=0
	while [ $CountExt -le $HostCount ]
	do
		ServerOrd=`echo ${HostArry[$CountExt]} |grep "\["`
		if [[ $ServerOrd != "" ]]
		then
			Sname=`echo ${HostArry[$CountExt]} | awk -F '[' '{print $1}'`
		fi

	let CountExt=CountExt+1
	done

### re-define array
HostArry=(${HostArry[@]})

### Change syntax for Bash regexp
DashParser=`echo ${HostArry[@]}| sed -e 's/-/\.\./g'`
Result=`echo $DashParser | sed -e 's/\[/\{/g' -e 's/\]/\}/g'`
HostChanged=( `eval echo $Result` )


### Array re-org
ZPackages=${PackageArry[@]}
PackageArry=($ZPackages)

ZOptions=${PackageArryOption[@]}
PackageArryOption=($ZOptions)

Zset=${PackageArrySet[@]}
PackageArrySet=($Zset)

ZHosts=${HostChanged[@]}
HostChanged=($ZHosts)

### Deploy the varibles
ZPackages=${PackageArry[@]}
ZOptions=${PackageArryOption[@]}
Zset=${PackageArrySet[@]}
ZHosts=${HostChanged[@]}
History_LOG="$ZinstBaseRoot/vault/Source/.zinst_history_log"


### Alias for existed fuction
ProcessPkg=$ZPackages
ProcessPkgNum=${#PackageArry[@]}

PureOption=`echo $ZOptions | sed -e 's/-stable //g'`

Allcommand="$CommandX $ZPackages $ZOptions $Zset"

### Print All Value
#echo ""
#echo CommandX: $CommandX
#echo ZPackages: ${PackageArry[@]}
#echo ZOptions: ${PackageArryOption[@]}
#echo Zset: ${PackageArrySet[@]}
#echo ZHosts: ${HostChanged[@]}
#echo ""

############################  zinst parsing engine end ##################################
#########################################################################################

	if [[ $CommandX = "mcp" ]]
	then
		if [[ $ZHosts != "" ]]
		then
			TargetDir=`echo $ZPackages | awk '{print $NF}'`
			Source=`echo $ZPackages | awk '{for (i=1;i<NF;i=i+1) print $i}'`
			SourceNum=`echo $Source | awk '{print NF}' `
    
			HostNum=`echo $ZHosts | awk '{print NF}'`
			Hcount=1
				while [[ $Hcount -le $HostNum ]]
				do
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					echo ""
					echo "[:: $TartgetHost  ::]"		
    
    
					Scount=1
						while [[ $Scount -le $SourceNum ]]
						do
							PartedSource=`echo $Source |awk '{print $'$Scount'}'`
							Check_Files=`ls $PartedSource`
								if [[ $Check_Files != $PartedSource  ]]
								then
									echo " =============  $PartedSource File not exist ============="
									exit 0;
								fi
    
							scp $PartedSource $TartgetHost:$TargetDir	
							let Scount=Scount+1
						done
					let Hcount=Hcount+1

					Localhost=$HOSTNAME
					Command_p=">   mcp  "
					SourceFull=(`echo "$Source"`)
					ssh  -oStrictHostKeyChecking=no $TartgetHost "echo \"`date +%Y.%m.%d_%T` `whoami` : $Command_p - $Localhost:${SourceFull[@]} -> $TargetDir \" >> $History_LOG"
				done
		else
			echo "$ROWW"
			echo " Hostname requires"
			echo "$ROWW"
		fi
		exit 0;
	fi

################################# Hostlist checker ######################################
RotaCommand=$Allcommand
RotaHost=$ZHosts
szinst="zinst"

	if [[ $ZHosts != "" ]]
	then 
	
		Count=0
		Max=${#HostChanged[@]}

			while [[ $Count -lt $Max ]];
			do
				HostF=${HostChanged[$Count]}
				## ssh connection check
CheckConnection=`nohup ssh  -oStrictHostKeyChecking=no $HostF 2> $ZinstBaseRoot/vault/Source/ssh_conn_test.log;cat $ZinstBaseRoot/vault/Source/ssh_conn_test.log |grep "No route\|not known\|Connection refused"; rm -f $ZinstBaseRoot/vault/Source/ssh_conn_test.log`

					if [[ $CheckConnection != "" ]]
					then
						echo $Barr	
						echo "It couldn't connect this host($HostF). Please check this hostname"
						echo $Barr	
					else
						## Install start with target host ##
						## Check the Package or Distribution server
						## Package scp to destination
						zinst_emptyCheck=`ssh $HostF "ls /usr/bin/ 2> /dev/null |grep zinst"`
							if [[ $zinst_emptyCheck != "" ]]
							then
								zinst_checkDes=`ssh $HostF "cat /usr/bin/zinst 2> /dev/null |grep ^VERSION | sed -e 's/VERSION=//g'"`
								zinst_checkLoc=`cat /usr/bin/zinst 2> /dev/null |grep ^VERSION | sed -e 's/VERSION=//g'`

									if [[ $zinst_checkDes < $zinst_checkLoc ]];
									then
										scp /usr/bin/zinst $HostF:/usr/bin/
									fi
							else
								scp /usr/bin/zinst $HostF:/usr/bin/
							fi

						#### Check SSH command ########
							if [[ $CommandX = "ssh" ]]
							then
								RotaCommand=$MidPackageArry
								szinst=""
							fi
						ssh $HostF "mkdir -p $ZinstBaseRoot/vault/Source"
						echo ""

						#### Local package scp to destination ####
						LocalPkg=`echo $RotaCommand | sed -e 's/^[a-z]* //g'`
						LocalPkg_Num=`echo $LocalPkg | awk '{print NF}'`
						CountSub=1
							while [[ $CountSub -le $LocalPkg_Num ]]
							do
								LocalRealPkg=`echo $LocalPkg | awk '{print $'$CountSub'}'`
									if [[ $CommandX = "^ssh$" ]]
									then
										LocalPkg_chk=`cd $PWD;ls |grep "^$LocalRealPkg"`
									fi

									if [[ $LocalPkg_chk != "" ]]
									then
										scp $LocalRealPkg $HostF:$ZinstSourceDir/
									fi

								let CountSub=CountSub+1
							done;


							#### Check set command for destination work ########
							if [[ $CommandX = "set" ]]
							then
								RotaCommand=`echo $RotaCommand | sed -e 's/ \-set//1'`
							fi

						MultiCheck=`echo $ZOptions |grep -e "-multi"`
							if [[ $MultiCheck = "" ]]
							then
								ssh $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir ;$szinst $RotaCommand"
							else
								### For multi-task
								ssh $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir ;$szinst $RotaCommand" &
							fi

					fi
				let Count=Count+1
			done
		exit 0;
	fi




Save_Restore_file(){

### Save a restore file 
Save_File_num=`ls $Save_Dir/ |egrep ^$Save_Filename | awk '{print NR}' |tail -1`

    if [[ $Save_File_num = ""  ]];
    then
        Save_File_num="0"
    fi

MakeANum=1
let MakeANum=MakeANum+$Save_File_num
Naming="$Save_Filename.$MakeANum"

echo "# --- Last touched by \"`whoami`\" --- " > $Save_Dir/$Naming
echo "# --- Last command \" zinst $PackageAll \" " >> $Save_Dir/$Naming
echo "# Date: `date +%Y.%m.%d_%T` " >> $Save_Dir/$Naming
echo "#"  >> $Save_Dir/$Naming
echo "# zinst package installer all-configuration backup-list for the package restore" >> $Save_Dir/$Naming
zinst ls | awk 'NR>2{print "Package install",$5".zinst"}' >> $Save_Dir/$Naming
echo "- - - " >> $Save_Dir/$Naming
zinst set | awk 'NR>2{print "Package settting",$1}' >> $Save_Dir/$Naming


    if [[ $Save_File_num != "0"  ]];
    then
		CheckSameSave=`diff $Save_Dir/$Save_Filename.$Save_File_num  $Save_Dir/$Naming 2> /dev/null`
			if [[ $CheckSameSave = "" ]]
			then
				rm -f $Save_Dir/$Naming
			fi
	fi


}

Pkg_Install(){

CounterAll=1

	while [[ $CounterAll -le $ProcessPkgNum ]]
	do
		Package_list=`echo $ProcessPkg |awk '{print $'$CounterAll'}'`
		Package_org=`echo "$Package_list" |awk -F ".zinst" '{print $1}'`
		Package_orgS=`echo "$Package_list" |awk -F "-" '{print $1}'`

		## Check the Package or Distribution server
		Pkg_result=`cd $PWD;ls |grep $Package_list`
			if [[ $Pkg_result = "" ]];
			then
				DIST=$Dist_server
			else
				DIST=`pwd`
			fi
		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`
		


		############################## Install start without target host ##################################################
		ZinstName=`echo $Package_list | awk -F ".zinst" '{print $1}'`;
		ZinstOrgName=`echo $Package_list | awk -F "-" '{print $1}'`;
			if [[ $Pkg_result != $Package_list ]]
			then
				###  check package by wget ###
				Package_RC=`wget  --spider  $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check ;cat $ZinstSourceDir/tmp_wget_check |grep Remote ;rm -f $ZinstSourceDir/tmp_wget_check`
			fi

		#### check local zinst file
			if [[ $Pkg_result = $Package_list ]]
			then
				Package_RC="Remote file exists."
				alias cp=cp
				CheckDir=`ls $ZinstSourceDir| grep $ZinstName$`
					if [[ $CheckDir = "" ]]
					then
						mkdir $ZinstSourceDir/$ZinstName
					fi
				cp -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
			fi

			if [[ $Package_RC = "Remote file does not exist -- broken link!!!" ]]
			then
				echo "  "
				echo "  $Package_list Package has not found."
				echo "  "
				exit 0;
			fi
		## Check a same version Package
		Existed_pkg=`ls -l $ZinstDIRs 2> /dev/null |grep ^l | grep "$Package_orgS-" | awk  '{print $11}' | awk -F '/' '{print $NF}'`
		echo ""
		echo ----- $Package_list -----


		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`
		
			if [[ $Package_org = $Existed_pkg ]];
			then 
			#########  -same -live option check  ################
				if [[ $PureOption != "-same" ]]
				then
					echo "$Barr"
					echo "The Server has a same version of package already"
					echo "Please insert an option like this \"-same\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
  
			if [[ $Package_org < $Existed_pkg ]];
			then
			#########  -downgrade option check  ################
				if [[ $PureOption != "-downgrade" ]]
				then
					echo "$Barr"
					echo "Your package is a older version then exists package version"
					echo "Please insert an option like this \"-downgrade\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
 
		## Unpacking
		mkdir -p $ZinstBaseRoot/vault/Source/$ZinstName
		mkdir -p $ZinstDIRs
		mkdir -p $ZinstBaseRoot/src
		##If you have distribution server. you can setup as below.
		alias cp=cp

		cd $ZinstSourceDir/$ZinstName/
			if [[ $Pkg_result != $Package_list ]]
			then
				wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;rm -f $ZinstSourceDir/tmp_wget_check
			fi

			#########  -same -live option check  ################
			if [[ $PureOption != "-same" ]]
			then
				cd $ZinstSourceDir/$ZinstName/
				rm -f $ZinstSourceDir/$ZinstName/$Package_list
					if [[ $Pkg_result != $Package_list ]]
					then
						wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;rm -f $ZinstSourceDir/tmp_wget_check
					else
						mv -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list	### local file copy
					fi
			fi

		cd $ZinstBaseRoot/vault/Source/$ZinstName
		tar zxf $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		rm -rf $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		rm -Rf $ZinstDIRs/$ZinstOrgName
		ln -sf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
		cd $ZinstDIRs/$ZinstOrgName; chmod 644 $ZICF
 
		## Value set
		Packagename=`cat $ZICF |grep ^PACKAGENAME |awk '{print $3}'`
		ZinstPackageDir="$ZinstDIRs/$Packagename"
		Version=`cat $ZICF |grep ^VERSION |awk '{print $3}'`
		Authorized=`cat $ZICF |grep ^AUTHORIZED |awk '{print $3}'` 
		Owner=`cat $ZICF |grep ^OWNER |awk '{print $3}'`
		Group=`cat $ZICF |grep ^GROUP |awk '{print $3}'`
		Perm=`cat $ZICF |grep ^PERM |awk '{print $3}'`
		Custodian=`cat $ZICF |grep ^CUSTODIAN |awk '{print $3}'`
		Crontab=`cat $ZICF |grep ^CRON |awk 'NR==1{print $1}'`
		CrontabRow=`cat $ZICF |grep ^CRON |awk '{print NR}' |tail -1`
		Description=`cat $ZICF |grep ^DESCRIPTION |awk '{print $0}'`

		### zinst default checkr
		## zinst set checker
		ZinstSetCheck=`cat $ZinstBaseRoot/vault/zinst/zinst_set.list 2> /dev/null | grep ZinstSet | awk '{print $1}'`
		ZinstSetTitle="#==========================ZinstSet==========================="
			if [[ $ZinstSetCheck != $ZinstSetTitle ]];
			then
				mkdir -p $ZinstBaseRoot/vault/zinst/
				echo "$ZinstSetTitle" > $ZinstBaseRoot/vault/zinst/zinst_set.list
				chgrp wheel $ZinstBaseRoot/vault/zinst/zinst_set.list
				echo "   -------> $ZinstBaseRoot/vault/zinst/zinst_set.list has been created for the zinst :)"
				echo " "
			fi
		mkdir -p $ZinstBaseRoot/vault/Source $ZinstBaseRoot/zinst

		### Dependency-checker file
		## zinst dependency checker
		ZinstDepCheck=`ls -ali  $ZinstBaseRoot/vault/zinst/ |grep .dependency.list`
		ZinstDepTitle="#==========================ZinstDep==========================="
			if [[ $ZinstDepCheck = "" ]];
			then
				mkdir -p $ZinstBaseRoot/vault/zinst/
				echo "$ZinstDepTitle" > $ZinstBaseRoot/vault/zinst/.dependency.list
				chgrp wheel $ZinstBaseRoot/vault/zinst/.dependency.list
				echo " "
			fi
		
		### Make a Blank .file.list
		echo "echo \" $Packagename-$Version package install ==>>> \" " > .file.list
		#echo "echo "$Packagename-$Version has been installed" " > .file.list

		## Package Dependency check - on no-over write
		Dep_checkerNum=`cat ./$ZICF  |grep "^ZINST requires pkg" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
				Dep_checker=`cat ./$ZICF  |grep "^ZINST requires pkg" | awk 'NR=='$DepCounter'{print $4}'`
				Dep_list_check=`zinst ls |awk -F '-  ' '{print $2}' | awk -F '-' '{print $1}' | egrep "^$Dep_checker$"`
					if [[ $Dep_checker != "" ]]
					then    

						if [[ $Dep_list_check = "" ]]
						then
							echo ""
							echo " ===== You need to install the \"$Dep_checker\" package first before the $Packagename install ===="
							rm -Rf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
							exit 0;
						fi



					fi

				### Dependency comment check
				echo "# Dependency package: $Dep_checker"  >> .file.list
				let DepCounter=DepCounter+1
			done;
 
		#### [File parser] #####
		### File set
		## Directory make for the File copy
		CPP=( `cat $ZICF |grep ^FILE | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPP != ""  ]]; 
			then
				echo "mkdir -p ${CPP[*]%/*}" >> .file.list
			fi
		## File copy
		#echo "File copy" >> .file.list
		cat $ZICF |grep ^FILE | awk '{print "cp",$6,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Permission
		cat $ZICF |grep ^FILE | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Owner 
		#cat $ZICF |grep ^FILE | awk '{print "chown",'\"$Owner\"',"'$ZinstBaseRoot'/"$5}' >> .file.list
		cat $ZICF |grep ^FILE | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## File Group 
		cat $ZICF |grep ^FILE | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list


		#### [Symbolic parser] #####
		### Symbolic link set
		## Directory makes for the simbolic
		LNP=( `cat $ZICF |grep ^SYMB | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $LNP != ""  ]]; 
			then
				echo "mkdir -p ${LNP[*]%/*}" >> .file.list
			fi

		## make a Symbolic
		#echo "Make a symbole" >> .file.list
		cat $ZICF |grep ^SYMB | awk '{print "ln -sf '$ZinstBaseRoot'/"$6, "'$ZinstBaseRoot'/"$5}' >> .file.list

		## Symb Permission
		#cat $ZICF |grep ^SYMB | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list
		## Symb Owner 
		#cat $ZICF |grep ^SYMB | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list
		## Symb Group 
		#cat $ZICF |grep ^SYMB | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list


		#### [Configuration file parser] #####
		### Config file set

		## Directory makes for the Config
		CPC=( `cat $ZICF |grep ^CONF | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPC != ""   ]];
			then						
				echo "mkdir -p ${CPC[*]%/*}" >> .file.list
				echo "touch  ${CPC[*]%/*}""/_zinst" >> .file.list
			fi
		#echo "Config file set" >> .file.list
		cat $ZICF |grep ^CONF | awk '{print "cp",$6,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Permission
		cat $ZICF |grep ^CONF | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Owner 
		cat $ZICF |grep ^CONF | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Group 
		cat $ZICF |grep ^CONF | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list

		#### [Change parse detail]
		## change Permission
		sed -i 's/chmod - /chmod '$Perm' /g' ./.file.list
		## change Owner
		sed -i 's/chown - /chown '$Owner' /g' ./.file.list
		## change Group
		sed -i 's/chgrp - /chgrp '$Group' /g' ./.file.list
		## change direction
		sed -i 's/\.\./\./g' ./.file.list

		#### [Command line parser] #####
		## Command line excute
		cat $ZICF |grep ^COMM | awk '{print $0}' | sed -e 's/COMM//g' >> .file.list


		### Config file set
		#### [Zinst Set parser]
		#cat $ZICF |grep '^ZINST set' |grep set | awk '{print "zinst set","'$Packagename'."$3"="$4}' >> .file.list
		cat $ZICF |grep '^ZINST set' |grep set | awk '{print "sed -i '/$Packagename.'"$3"'/'d '$ZinstBaseRoot/vault/zinst/zinst_set.list'"}' >> .file.list
		cat $ZICF |grep '^ZINST set' |grep set | awk '{print " echo \"'"$Packagename."'"$3"="$4"\" >> '$ZinstBaseRoot'/vault/zinst/zinst_set.list"}' >> .file.list


		### Package Dependency check
		#### [Zinst Dep parser]
		Dep_checkerNum=`cat ./$ZICF  |grep "^ZINST requires" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
			ZinstDeps=`cat $ZICF |grep '^ZINST requires' | awk 'NR=='$DepCounter`
				if [[ $ZinstDeps != "" ]];
				then
					ZinstDepChk=`cat $ZICF |grep '^ZINST requires' | awk '{print $4" - package has a dependency with ( '$Packagename' )"}'`
					ZinstCurrentDeps=`cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep "$ZinstDepChk"`
						if [[ $ZinstCurrentDeps = ""  ]];
						then
							echo "$ZinstDepChk"  >> $ZinstBaseRoot/vault/zinst/.dependency.list
						fi
				fi
			let DepCounter=DepCounter+1
			done;	

		#### [Cron parser] #####
		### Condtab set

			if [[ $Crontab = "CRON" ]];
			then
				Counter=1
					while [ $Counter -le $CrontabRow ]
					do
						echo "##$Packagename-$Version Cron Scheduler"  > $Packagename.cron	
						cat $ZICF |grep ^CRON | awk 'NR=='$Counter'{print $5,$6,$7,$8,$9,"'$ZinstBaseRoot'/"$10," #'$Packagename'"}' >> $Packagename.cron
						CronUser=`cat $ZICF |grep ^CRON | awk 'NR=='$Counter'{print $3}'`
							if [[ $CronUser = "-" ]];
							then 
								CronUser=$Owner
							fi
						TargetCron=/var/spool/cron/$CronUser
						echo "#### $TargetCron"  >> .file.list
						Result=`cat $TargetCron  2> /dev/null |grep $Packagename`
							if [[ $Counter = "1" ]];
							then
								if [[ $Result != "" ]];
								then
									echo "---==== Crontab has a configuration about this already ====---";
									sed -i "/$Packagename/d" $TargetCron;
									echo "---==== Crontab has been changed as a new configration ====---"
									cat $Packagename.cron >> $TargetCron
								else
									cat $Packagename.cron >> $TargetCron
									echo "---==== Crontab has been changed as a new configration ====---"
								fi
							else
								cat $Packagename.cron >> $TargetCron
							fi
					let Counter=Counter+1
					done;
			#rm $Packagename.cron
			fi
		## Excute command list and file & package file remove
		sed -i 's/\t//g' ./.file.list
		sed -i 's/^ cp/cp/g' ./.file.list
		sh ./.file.list; zinst ls -files $Packagename
		echo "$Packagename-$Version package has been installed"
		rm -f $ZinstSourceDir/$Package_list 1> /dev/null

## Out of 3 steps older package clean - Todo

		## Package listup
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		ls -l $ZinstDIRs/ | awk '{print $6,$7,$8,"-", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist

		Command_p="+ Install"
		echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ZinstName $PureOption" >> $History_LOG 
		let "Host_index=$Host_index + 1";

		############################## Install end without target host ##################################################	
		let CounterAll=$CounterAll+1
	done

	############################## Setting config  #################################
	if [[ $Zset != "" ]]
	then
		SetOptionValue="$Zset"
		Pkg_Set	$*
	fi

Save_Restore_file $*
}

Pkg_Set() {

### Base information
CheckSetArry=($Zset)
CheckSetNum=${#CheckSetArry[@]}
SetValue=${CheckSetArry[1]}


	if [[ $SetValue = "" ]];
	then
		cat $ZinstBaseRoot/vault/zinst/zinst_set.list
	else
		CSetCount=0;
			for (( i=0; i<=$CheckSetNum; i++ ))
			do
				CheckSet=`echo "${CheckSetArry[$i]}"`

					if [[ $CheckSet = "set" ]] || [[ $CheckSet = "-set" ]]
					then
						let CSetCount=$CSetCount+1
					fi
			done
		let CSetCount=$CSetCount+2

		CountSet=2
		while [[ $CountSet -lt $CSetCount  ]]
		do

			SetOptionValueE=`echo "${CheckSetArry[@]}" | awk -F '-set ' '{print $'$CountSet'}' |sed -e 's/ //'  2> /dev/null`
			CheckSetCC=`echo $SetOptionValueE |egrep " -$"`
			if [[ $CheckSetCC != "" ]]
			then
				echo 
			fi
			SetTarget=`echo "$SetOptionValueE" | awk -F "=" '{print $1}'`	
			ZinstSet=`echo "$SetOptionValueE" | sed -e "s/$SetTarget=//g" 2> /dev/null`
			Option=`echo $SetTarget | awk -F '.' '{print $2}'`
			PackageS=`echo $SetTarget | awk -F '.' '{print $1}'`

			SetZICF="$PackageS.zicf"
			## Check a set list in zinst
			CurrentSet=( `cat $ZinstBaseRoot/vault/zinst/zinst_set.list | grep ^$SetTarget` )
			CurrentSetCheck=`echo "$CurrentSet" | awk -F "=" '{print $1}'`
			CurrentSetCheck2=`echo "$CurrentSet" | sed -e "s/$CurrentSetCheck=//g"  2> /dev/null`
			Setchecker=`ls $ZinstDIRs 2> /dev/null |grep $PackageS`

				if [[ $Setchecker != ""  ]];
				then
					## Find a current set 
					Grep_ZICF=`cat $ZinstDIRs/$PackageS/$SetZICF |grep ^CONF | awk '{print "'$ZinstBaseRoot'/"$5}'`
						if [[ $Grep_ZICF = "" ]]
						then 
							echo "$Barr"
							echo "$PackageS has not a config file as a zicf or we couldn't find any config"
							echo "Please check this zicf file of the package."
							echo ""
							echo "ex) zinst list -zicf $PackageS | grep ^CONF <--- Result is empty."
							echo " If so, you should change the file type from FILE to CONF "
							echo "$Barr"
							exit 0;
						fi
					Conf_Dir="${Grep_ZICF[*]%/*}"
					Grep_Option=`grep "^$Option=" $Conf_Dir/*`
						if [[ $Grep_Option = "" ]]
						then
							Grep_Option=`grep "^$Option = " $Conf_Dir/*`
								if [[ $Grep_Option = "" ]]
								then 
									Grep_Option=`grep "^$Option " $Conf_Dir/*`
								fi
						fi
					## Parsing
					Conf_File=${Grep_Option%:*}

						if [[ $CommandX = set ]];
						then
							Command_p=" * setup "
						fi

					### Current Setting check and replace
						if [[ $SetTarget = $CurrentSetCheck ]];
						then
							sed -i "/$SetTarget/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
					
							Equiltype1=`grep "$Option=$CurrentSetCheck2" $Conf_File`
							Equiltype2=`grep "$Option = $CurrentSetCheck2" $Conf_File`
							Equiltype3=`grep "$Option $CurrentSetCheck2" $Conf_File`
							Check_Conf_File=`grep \/ $Conf_File`
								if [[ $Check_Conf_File != ""  ]];
								then
									sed -i "s/\//%%%/g" $Conf_File
									CurrentSetCheck2=`echo "$CurrentSetCheck2" | sed -e "s/\//%%%/g"`
									ZinstSet=`echo "$ZinstSet" |  sed -e "s/\//%%%/g"`
										if [[ $Equiltype1 != "" ]];
										then 
											sed -i "s/$Option=$CurrentSetCheck2$/$Option=$ZinstSet/g" $Conf_File
										elif [[ $Equiltype2 != "" ]]; then
											sed -i "s/$Option = $CurrentSetCheck2$/$Option = $ZinstSet/g" $Conf_File
										elif [[ $Equiltype3 != "" ]]; then
											sed -i "s/$Option $CurrentSetCheck2$/$Option $ZinstSet/g" $Conf_File
										fi		
									sed -i "s/%%%/\//g" $Conf_File
								fi
			
								if [[ $Equiltype1 != "" ]];
								then 
									sed -i "s/$Option=$CurrentSetCheck2$/$Option=$ZinstSet/g" $Conf_File
								elif [[ $Equiltype2 != "" ]]; then
									sed -i "s/$Option = $CurrentSetCheck2$/$Option = $ZinstSet/g" $Conf_File
								elif [[ $Equiltype3 != "" ]]; then
									sed -i "s/$Option $CurrentSetCheck2$/$Option $ZinstSet/g" $Conf_File
								fi		

							### Stamping a Set value for history
							Grep_Option=`grep "^$Option=" $Conf_Dir/*`
								if [[ $Grep_Option = "" ]]
								then
									Grep_Option=`grep "^$Option = " $Conf_Dir/*`
										if [[ $Grep_Option = "" ]]
										then 
											Grep_Option=`grep "^$Option " $Conf_Dir/*`
										fi
								fi
							realSetOption=`echo "$Grep_Option"  | awk -F ':' '{print $2}' | sed -e "s/$Option /$Option=/g" -e 's/== /=/g'`
							echo "$PackageS.$realSetOption" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
							cat  $ZinstBaseRoot/vault/zinst/zinst_set.list |grep ^$SetTarget

							echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $SetOptionValueE  " >> $History_LOG
						else
							echo "$SetOptionValueE" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
							echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $SetOptionValueE  " >> $History_LOG
						fi
					Save_Restore_file $*
				else
					echo " --- Package name has not found. Please insert a package name & option exactly ---"
				fi
			let CountSet=$CountSet+1
		done
	fi

}

Pkg_Remove(){
ProcessPkg=($ZPackages)

	if [[ $ZPackages = "" ]]
	then
		echo "=============== Please insert a package name as you need to see ============"
	else
		Counter=0
			while [[ $Counter -lt $ProcessPkgNum ]]
			do

				Pkg_list=${ProcessPkg[$Counter]}
				ZinstOrgName=`echo $Pkg_list| awk -F "-" '{print $1}'`
				Package_RC=`ls $ZinstDIRs |egrep "^$ZinstOrgName$"`
					if [[ $ZinstOrgName != $Package_RC ]]
					then
						echo "  "
						echo "  $ZPackages Package has not found."
						echo "  "
						exit;
					fi
				RmResult=`cat $ZinstDIRs/$ZinstOrgName/.file.list |grep ^echo | awk '{print $2}'`
					if  [[ $RmResult != "" ]]; 
					then
						cd $ZinstDIRs/$ZinstOrgName
						RmTargetCron=`cat .file.list  | grep \#### | awk '{print $2}'`
						RmPkg_list=`cat .file.list |grep ^echo |awk '{print $3}'`
						RmDepChecker=`cat $ZinstBaseRoot/vault/zinst/.dependency.list | grep ^$ZinstOrgName |awk '{print $9}' `
							if [[ $RmDepChecker != "" ]]
							then
								echo "===== You have to remove as below package(s) ===== "
								echo "$RmDepChecker"
								echo "================================================== "
								echo "= $ZinstOrgName has a dependency with that. = "
								exit 0;
							fi
						sed -i '/'$ZinstOrgName'/d' $ZinstBaseRoot/vault/zinst/.dependency.list
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^cp | awk '{print "rm -Rfv",$3}'`
						RmMv=`cat $ZinstDIRs/$ZinstOrgName/.file.list |grep ^mv  | awk '{print $2}' | awk -F '/' '{print $NF}'`
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mv | awk '{print "rm -Rfv",$3"$RmMv"}'`
						`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^ln | awk '{print "rm -Rfv",$4}'`
						RmDir=`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mkdir |awk '{print "ls", $3}'`
							if [[ $RmDir = "" ]];
							then
								`cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep ^mkdir |awk '{print "rmdir", $3}'`
							fi
						RmZinstName=`ls $ZinstBaseRoot/vault/Source/ |grep $Pkg_list`
						rm -Rfv $ZinstDIRs/$ZinstOrgName
						rm -Rfv $ZinstBaseRoot/vault/Source/$RmPkg_list
 						echo "########## $RmPkg_list package has been removed ######## "
						sed -i "/$ZinstOrgName/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
							if [[ $RmTargetCron != "" ]]
							then
								sed -i "/$ZinstOrgName/d" $RmTargetCron
							fi
					else
						echo "============= $ZPackages package has not installed =================="
					fi
				### Remove action stamps to Dist
				curl -e --url $Dist_server/remove:$RmPkg_list.zinst > /dev/null  2>&1

				Command_p="- Remove "
				echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $RmPkg_list  " >> $History_LOG
				let Counter=Counter+1
			done
	fi

cd $ZinstDIRs
Save_Restore_file $*

}

Pkg_List(){

### Check file of the phrase
Pkg_file_checker=`echo $ZPackages |grep "/"`
CurrentCheck=`echo $ZPackages |grep "^./"`

	if [[ $ZOptions = "-files" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				if [[ $Pkg_file_checker != ""  ]]
				then
						if [[ $CurrentCheck != "" ]]
						then
							PWD=`pwd | sed 's/\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/\.\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e "s/%%%/$PWD\//g"`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/%%%/\//g'`
						fi
					cd $ZinstDIRs/
					File_list=`ls`
					File_list_Num=`echo $File_list |awk '{print NF}'`
					CounterFM=1
    
					#####  loop start for the package find each directories
						while [[ $CounterFM -le $File_list_Num ]]
						do
							Package_dir=`echo $File_list | awk '{print $'$CounterFM'}'`
							cd $ZinstDIRs/$Package_dir
							Package_finder=`egrep "$Pkg_file_checker$" .file.list | grep "^cp" |awk '{print $3}' 2> /dev/null`
							if [[ $Package_finder != "" ]]
							then
								cd $ZinstDIRs/
								Result_file=`ls -ali | grep $Package_dir- | awk -F '/' '{print $NF}'`
								echo "$Result_file  <-------   $Pkg_file_checker"
							fi

							Symb_finder=`egrep "$Pkg_file_checker$" .file.list | grep "^ln" |awk '{print $4}' 2> /dev/null`
							if [[ $Symb_finder != "" ]]
							then
								cd $ZinstDIRs/
								Result_file=`ls -ali | grep $Package_dir- | awk -F '/' '{print $NF}'`
								echo "$Result_file  <-------   $Pkg_file_checker"
							fi
        
							cd $ZinstDIRs/
							let CounterFM=CounterFM+1
						done
        
						if [[ $Result_file = "" ]]
						then
							echo " ---- Could not find any package ---- "
						fi	
					exit 0;
				fi
		ZinstOrgName=`echo $ZPackages| awk -F "-" '{print $1}'`
		cd $ZinstDIRs/$ZinstOrgName 2> /dev/null
		cat $ZinstDIRs/$ZinstOrgName/.file.list 2> /dev/null | grep ^cp | awk '{print $3}'
		cat $ZinstDIRs/$ZinstOrgName/.file.list 2> /dev/null | grep ^ln | awk '{print $4,"<- " $3}'
	fi
	elif [[ $ZOptions = "-zicf" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo ${PackageArry[0]}| awk -F "-" '{print $1}'`
				cd $ZinstDIRs/$ZinstOrgName
				cat $ZinstDIRs/$ZinstOrgName/$ZinstOrgName.zicf
			fi
	elif [[ $ZOptions = "-dep" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo ${PackageArry[0]}| awk -F "-" '{print $1}'`
				cd $ZinstDIRs/$ZinstOrgName
				cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep ^$ZinstOrgName
			fi
	else
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		mkdir -p $ZinstBaseRoot/vault/zinst/
		export TIME_STYLE="+%Y-%m-%d %H:%M:%S %z" 
		ls -l $ZinstDIRs/ 2> /dev/null | awk '{print $6,$7," - ", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist 
		sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist
		PkgListZ=`cat $ZinstBaseRoot/vault/zinst/.pkglist 2> /dev/null`
			if [[ $PkgListZ = "" ]]
			then
				echo "=============== Not existed zinst package in here ============"
			fi
		echo "$PkgListZ"

	fi
}

Pkg_Find(){

	if [[ $ZOptions = "-local" ]]
	then
		    if [[ $ZPackages = "" ]]
		    then
				ls $ZinstSourceDir | grep .zinst
		    else
			   ls $ZinstSourceDir | grep $ZPackages  | grep .zinst 
		    fi
	else
			if [[ $ZPackages = "" ]];
			then
				curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$
			else
				curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$ | grep $ZPackages 
			fi
	
	fi

}

Cront_Command(){

Command_p="+ Crontab - Edit"
	case "$2" in
	-l)
		crontab -l ;;
	-e)
		crontab -e 
		echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p" >> $History_LOG ;;
	-u)
	case "$4" in
		-l)
			crontab -u $ZPackages -l ;;
		-e)
			crontab -u $ZPackages
			echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p -u $ZPackages " >> $History_LOG ;;
		*)
			echo " - Please insert an option as you need to change correctly - "
			echo " ex) 'zinst crontab -e' to edit crontab"
			echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
		;;
	esac
	;;
	*)
		echo " - Please insert an option as you need to change correctly - "
		echo " ex) 'zinst crontab -e' to edit crontab"
		echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
	;;
	esac
}

Pkg_Restore(){
Types=$ZOptions
Restore_File=$ZPackages
	if [[ $Types != ""  ]]
	then
			if [[ $Restore_File = "" ]]
			then
				echo $Barr
				echo " --- Parse error: Please insert a information exactly. ---"
				echo " --- zinst restore -file [Save filename]               ---"
				echo " --- or zinst restore -igor                            ---"
				echo $Barr
				exit 0;	
			fi
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi

RestoreFile_checkr=`ls $Restore_File`
	if [[ $RestoreFile_checkr != $Restore_File ]]
	then
		echo $Barr
		echo " --- Could not find save file as you typed.            ---"
		echo " --- Plese insert a file name exactly.                 ---"
		echo $Barr
	fi

	if [[ $Types = "-file" ]]
	then
		cat $RestoreFile_checkr |egrep "^Package" | sed 's/Package/zinst/g' |  sed 's/settting/set/g'
	elif [[ $Types = "-igor" ]]
	then
		echo $Barr
		echo " Igor system will be launched" 
		echo $Barr
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi
}

Daemon_Control(){
ProcessPkg=($ZPackages)
ProcessPkgNum=${#ProcessPkg[@]}




Counter=0
Command_p="# Daemon $CommandX"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - ${ProcessPkg[@]}  " >> $History_LOG
	while [[ $Counter -lt $ProcessPkgNum ]]
	do
		DaemonC=`echo "${ProcessPkg[$Counter]}"`
		export LANG=c
		#/sbin/service $DaemonC $CommandX > $ZinstBaseRoot/vault/Source/Daemon_ctrl.log 2> /dev/null
		/sbin/service $DaemonC $CommandX &> $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		#DaemonLog=`cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log | awk 'NR==1'`
		DaemonLog=`cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log`
		DaemonCheck=`echo $DaemonLog | grep "unrecognized"`
			if [[ $DaemonCheck != "" ]]
			then
				echo "$DaemonC is unrecognized service"
				exit 0;
			fi
		echo "                    `whoami` : "#    " - $DaemonC: $DaemonLog  " >> $History_LOG
		rm -f $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		let Counter=Counter+1
	done
}



Zinst_Version(){
 echo "Zinst version" `cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
}

Zinst_selfupdate(){
cd ~/;
rm -f zinst
wget  $Dist_server/zinst;
chmod 755 zinst;
chgrp wheel zinst;

mkdir -p $ZinstBaseRoot/vault/Source/bin
Number=`ls $ZinstBaseRoot/vault/Source/bin/ |egrep ^zinst.bak. |awk '{print NR}' |tail -1`
	if [[ $Number = ""  ]];
	then
		Number="0"
	fi
mv $ZinstBaseRoot/vault/Source/bin/zinst $ZinstBaseRoot/vault/Source/bin/zinst.bak.$Number 2> /dev/null;
cp zinst $ZinstBaseRoot/vault/Source/bin/zinst;
rm -f /usr/bin/zinst;
ln -sf $ZinstBaseRoot/vault/Source/bin/zinst /usr/bin/zinst;
ShowVersion=`cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
echo "Zinst version" $ShowVersion

Command_p="@ Self-update"
echo "`date +%Y.%m.%d_%T` `whoami` : $Command_p - $ShowVersion  " >> $History_LOG

} 

Help_Command(){
echo "------------------------------------------------------------------------------------------------------ "
echo "	zinst	[Command]	[Option Types]		[Target Names]	[-h or -H]	[Targe Host] "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 ssh		[Command]						*Host requires	  "
echo "...................................................................................................... "
echo "		 mcp		[local-files]		[Destination DIR]		*Host requires "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 install				[Package]   "
echo "				[-same]			[Package]	  "
echo "				[-downgrade]		[Package]	  "
echo "				[-stable]		[Package without version]	  "
echo "		 remove					[Package]	  "
echo "...................................................................................................... "
echo "		 list					[Blank for list-up]	  "
echo "				[-files]		[Package]	  "
echo "				[-files]		[/Dir/File-name]	  "
echo "				[-zicf]			[Package]	  "
echo "				[-dep]			[Package]	  "
echo "...................................................................................................... "
echo "		 restore	[-file]			[Saved file_name]	  "
echo "				[-igor]			* Not available yet "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 set					[Blank for list-up]			  "
echo "		 [Package]	-set 			[Package.option=value]  "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 start					[Daemon_name]	  "
echo "		 stop					[Daemon_name]	  "
echo "		 restart				[Daemon_name]	  "
echo "...................................................................................................... "
echo "		 crontab	[-e]						  "
echo "				[-l] "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 find		[Blank for list-up]			 "
echo "				[Package]		 "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 track		[Blank for list-up]			 "
echo "				[Package or hostname]		 "
echo "				[Package or hostname]	[-file] 	 "
echo "				[Package or hostname]	[-file] [Export File_name]	 "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 history	[Number of Range] "
echo "...................................................................................................... "
echo "		 self-update			 "
echo "		 -version			 "
echo "		 *, help		 "
echo "------------------------------------------------------------------------------------------------------ "
echo " -h is target host, -H is targe file of hostlist "
echo " ex) zinst i sample-1.0.0.zinst -h web01.news.kr[1,3]  web[03-12].news[1,3] "
echo " ex) zinst i sample-1.0.0.zinst -H ./server_list.txt "
echo "------------------------------------------------------------------------------------------------------ "
echo " "
### Hidden function for Multi-tasking on multiful host -multi option
### But it's not stable on some function

}

Help_Detail(){
echo "------------------------------------------------------------------------------------------------------ "
echo "	zinst	[Command]	[Option Types]		[Target Names]	[-h or -H]	[Targe Host] "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For remote work "
echo " "
echo "  - Remote control: You can send a command to seperated hosts "
echo "		 ssh		[Command]						*Host requires	  "
echo "...................................................................................................... "
echo " "
echo "  - File copy to remote: You can send a file(s) to seperated hosts(mcp = Multi CoPier) "
echo "		 mcp		[local-files]		[Destination DIR]		*Host requires "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For Package "
echo " "
echo "  - Package manage: You can install/remove a package as under the command "
echo "		 install				[Package]   "
echo "				[-same]			[Package]	  "
echo "				[-downgrade]		[Package]	  "
echo "				[-stable]		[Package without version for latest package]	  "
echo "		 remove					[Package]	  "
echo "...................................................................................................... "
echo " "
echo "  - Package view: You can see an installed packages/files/index & dependency "
echo "		 list					[Blank for list-up]	  "
echo "				[-files]		[Package]	  "
echo "				[-files]		[/Dir/File-name]	  "
echo "				[-zicf]			[Package]	  "
echo "				[-dep]			[Package]	  "
echo "...................................................................................................... "
echo " "
echo "  - Package restore: You can restore the package set as a file for restore	ex) ~/z/save/zinst-* "
echo "		 restore	[-file]			[Saved file_name]	  "
echo "				[-igor]			* Not available yet "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For Configuration "
echo " "
echo "  - Configuration: Zinst can helps to configure the setup without manual modify the Conf-file "
echo "		 set					[Blank for list-up]			  "
echo "							[Package.option=value]			  "
echo " "
echo "  - Configuration with Install: Configure the setup with the package install "
echo "		 [Package]	-set 			[Package.option=value]  "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For System manage "
echo " "
echo "  - Daemon control: You can control the daemon from the /etc/init.d/ directory "
echo "		 start					[Daemon_name]	  "
echo "		 stop					[Daemon_name]	  "
echo "		 restart				[Daemon_name]	  "
echo "...................................................................................................... "
echo " "
echo "  - Crontab manage: You can touch the cron schduler by zinst "
echo "		 crontab	[-e]						  "
echo "				[-l] "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For install available package find "
echo " "
echo "  - Package find "
echo "		 find		[Blank for list-up]			 "
echo "				[Package]		 "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For tracking the released package "
echo " "
echo "  - Track the package "
echo "		 track		[Blank for list-up]			 "
echo "				[Package or hostname]		 "
echo "				[Package or hostname]	[-file] 	 "
echo "				[Package or hostname]	[-file] [Export File_name]	 "
echo "------------------------------------------------------------------------------------------------------ "
echo " + View history "
echo " "
echo "		 history	[Number of Range] "
echo "...................................................................................................... "
echo " "
echo "		 self-update			 "
echo "		 -version			 "
echo " "
echo "		 *, help		 "
echo "------------------------------------------------------------------------------------------------------ "
echo " -h is target host, -H is targe file of hostlist "
echo " ex) zinst i sample-1.0.0.zinst -h web01.news.kr[1,3]  web[03-12].news[1,3] "
echo " ex) zinst i sample-1.0.0.zinst -H ./server_list.txt "
echo "------------------------------------------------------------------------------------------------------ "
echo " "
echo " "
echo " "
echo "Example)"
echo "zinst ssh 'cat /etc/hosts;pwd' -h web[01-09].test.com	<- Send a command to seperated hosts "
echo " "
echo "zinst mcp ./test.* /data/var/ -h web[01-09].test.com 	<- File copy to seperated hosts "
echo " "
echo "zinst install hwconfig -stable			<- for package apply as a latest version automatically "
echo " "
echo "zinst install hwconfig-1.0.2.zinst -same		<- for overwrite the package as a same version "
echo "zinst i hwconfig-1.0.2.zinst -downgrade			<- for downgrade the package as a lower version "
echo " "
echo "zinst list -files hwconfig				<- list-up file of the hwconfig package "
echo "zinst ls -files /data/bin/hwconfig			<- find a package as a file "
echo "zinst list -zicf hwconfig				<- see the index file of package "
echo "zinst ls -dep hwconfig 					<- package dependency check "
echo " "
echo "zinst set						<- list-up of zinst current setups "
echo "zinst set hwconfig.nameserver1=1.1.1.1			<- change the setup nameserver1=1.1.1.1 to the hwconfig "
echo " "
echo "zinst i hwconfig-1.0.2.zinst -set hwconfig.nameserver1=1.1.1.1 -set hwconfig.nameserver2=2.2.2.2 "
echo " <- change the setup nameserver1=1.1.1.1 and nameserver2=2.2.2.2 to the hwconfig with package install "
echo " "
echo "zinst restart httpd					<- restart the httpd daemon by /etc/init.d/httpd file control "
echo " "
echo "zinst crontab -l 					<- list-up the crontab scheduler "
echo "zinst crontab -u root -l			<- list-up the crontab scheduler for an user "
echo "zinst cront -e	 					<- edit the crontab scheduler "
echo " "
echo "zinst find						<- list-up the available file for install "
echo "zinst find hwcon					<- list-up the available file for install as you typed "
echo " "
echo "zinst hist						<- show the history "
echo "zinst hist 300						<- show the 300 lines history "
echo " "
echo "zinst self-update					<- zinst command update( *Requires: Package dist server must has a zinst file) "
echo " "
echo "zinst help						<- Detail view the help "
echo " "
echo "=== For more detail: http://twiki.gsenext.com/bin/view/Main/TheZinst ===" 
echo " "
echo " "

}

History(){
	if [[ $ZPackages != "" ]]
	then
			ZPackages="-$ZPackages"
	fi

tail $ZPackages $History_LOG
}



Pkg_Track(){

### Set for Print screen

CheckZPkg=`echo ${PackageArry[0]} | egrep "\/"`
	if [[ $CheckZPkg != "" ]]
	then
		PackageArry[0]=""
	fi

width=102
echo ""
echo "Package has been released to below list - Sort by \"${PackageArry[0]}\""
printf "%$width.${width}s \n" "$Barr$Barr"
printf "%-30s %-50s %-30s \n" "Host" "Package" "Date"
printf "%$width.${width}s \n" "$Barr$Barr"
	

ResultPack=`curl -e --url $Dist_server/track/distributed_package 2> /dev/null |egrep " ${PackageArry[0]}"`

FileChecker=`echo $MidPackageArry | awk -F '-file' '{print $2}'`
	if [[ $FileChecker = ""  ]]
	then
		OutPutFile="$PWD/host.output"
	else
		OutPutFile="$FileChecker"
	fi


	if [[ $ResultPack = "" ]]
	then
		OutTrack=`curl -e --url $Dist_server/track/distributed_package 2> /dev/null |egrep "${PackageArry[0]}" | awk '{printf("%-30s",$1); printf("%-50s",$2); printf("%-30s\n",$3)}'`
	else
		OutTrack=`curl -e --url $Dist_server/track/distributed_package 2> /dev/null |egrep " ${PackageArry[0]}" | awk '{printf("%-30s",$1); printf("%-50s",$2); printf("%-30s\n",$3)}'`
	fi

	### Export data
	if [[ $ZOptions != "-file"  ]] 
	then
		echo "$OutTrack"
	else
		echo "$OutTrack"
		echo "$OutTrack" | awk '{print $1}' > $OutPutFile
		printf "%$width.${width}s \n" "$Barr$Barr"
		echo " Hostlist file has been created to $OutPutFile "
	fi

printf "%$width.${width}s \n" "$Barr$Barr"

}


##############################  Command menu  ###################################
	case "$CommandX" in
	i*)
		Pkg_Install $* 	;;
	set)
		Pkg_Set $*	;;
	rem*)
		Pkg_Remove $*	;;
	start)
		Daemon_Control $*	;;
	stop)
		Daemon_Control $*	;;
	restart)
		Daemon_Control $*	;;
	his*)
		History	;;
	self-up*)
		Zinst_selfupdate 	;;
	cront*)
		Cront_Command $* ;;
	l*s*)  
		Pkg_List $*	;;
	restore)
		Pkg_Restore $*	;;
	find)
		Pkg_Find $*	;;
	track)
		Pkg_Track $* ;;
	-v*)
		Zinst_Version 	;;
	*help)
		Help_Detail	;;
	*)
		Help_Command	;;
	esac

exit 0;





